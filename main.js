(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,'\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: "Montserrat", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.selected {\n    opacity:.5;\n}\n\n.player.ship:hover {\n    opacity: .5;\n}\n\n.computer:hover {\n    opacity:.5;\n}\n\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    \n    border-color: black;\n}\n\n.miss {\n    /* background-image: url(\'./images/splash.png\');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url(\'./images/flame.png\');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n.hit:hover {\n    opacity:1;\n}\n\n.miss:hover{\n    opacity:1;\n}\n\n.highlighted {\n    border-color: red;\n}\n\n\n\n\n/*Instruction Screen*/\n#instructions-title {\n    text-align: center;\n    font-size: 2vw;\n}\n.instructions-header {\n    font-size: 1vw;\n    font-family: "Raleway", sans-serif;\n\n}\n\n.description {\n}\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #f4f5f5;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 30vw;\n    height: 70vh;\n    border-radius: 10px;\n    overflow-y:auto\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: "Montserrat", sans-serif;\n    font-weight: 900;\n    font-size: 3vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}\n\n.board-name {\n    font-size: 4vh;\n}\n\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";AACA;IACI,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,qCAAqC;IACrC,oCAAoC;IACpC,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,cAAc;AAClB;AACA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,OAAO;IACP,mBAAmB;IACnB,iBAAiB;IACjB,YAAY;AAChB;;AAEA,iBAAiB;AACjB;IACI,UAAU;AACd;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,UAAU;AACd;;AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,iBAAiB;IACjB,0BAA0B;IAC1B,kBAAkB;IAClB,qBAAqB;IACrB,wBAAwB;AAC5B;;AAEA;IACI,4CAA4C;;IAE5C,mBAAmB;AACvB;;AAEA;IACI;+BAC2B;IAC3B,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;;AAEvB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,SAAS;AACb;;AAEA;IACI;+BAC2B;IAC3B,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,iBAAiB;AACrB;;;;;AAKA,qBAAqB;AACrB;IACI,kBAAkB;IAClB,cAAc;AAClB;AACA;IACI,cAAc;IACd,kCAAkC;;AAEtC;;AAEA;AACA;AACA;IACI,cAAc,EAAE,sBAAsB;IACtC,eAAe,EAAE,kBAAkB;IACnC,UAAU,EAAE,eAAe;IAC3B,kBAAkB,EAAE,wBAAwB;IAC5C,OAAO;IACP,MAAM;IACN,WAAW,EAAE,eAAe;IAC5B,YAAY,EAAE,gBAAgB;IAC9B,cAAc,EAAE,4BAA4B;IAC5C,4BAA4B,EAAE,mBAAmB;IACjD,iCAAiC,EAAE,qBAAqB;EAC1D;;EAEA,kBAAkB;EAClB;IACE,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB;;EAEF;;GAEC,qBAAqB;GACrB;IACC,cAAc;IACd,YAAY;IACZ,eAAe;IACf,iBAAiB;EACnB;;EAEA;;IAEE,WAAW;IACX,qBAAqB;IACrB,eAAe;EACjB;;AAEF,WAAW;AACX;IACI,qCAAqC;IACrC,gBAAgB;IAChB,cAAc;IACd,UAAU;AACd;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:['\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: "Montserrat", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.selected {\n    opacity:.5;\n}\n\n.player.ship:hover {\n    opacity: .5;\n}\n\n.computer:hover {\n    opacity:.5;\n}\n\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    \n    border-color: black;\n}\n\n.miss {\n    /* background-image: url(\'./images/splash.png\');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url(\'./images/flame.png\');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n.hit:hover {\n    opacity:1;\n}\n\n.miss:hover{\n    opacity:1;\n}\n\n.highlighted {\n    border-color: red;\n}\n\n\n\n\n/*Instruction Screen*/\n#instructions-title {\n    text-align: center;\n    font-size: 2vw;\n}\n.instructions-header {\n    font-size: 1vw;\n    font-family: "Raleway", sans-serif;\n\n}\n\n.description {\n}\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #f4f5f5;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 30vw;\n    height: 70vh;\n    border-radius: 10px;\n    overflow-y:auto\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: "Montserrat", sans-serif;\n    font-weight: 900;\n    font-size: 3vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}\n\n.board-name {\n    font-size: 4vh;\n}\n\n\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],c=o.base?l[0]+o.base:l[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var h=t(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)n[h].references++,n[h].updater(p);else{var u=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:A,updater:u,references:1})}i.push(A)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=o(e,r),c=0;c<a.length;c++){var d=t(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{function e(e,n,t){let o=[n];for(let r=1;r<e;r++)"horizontal"==t?o.push([n[0]+r,n[1]]):"vertical"==t&&o.push([n[0],n[1]+r]);return{selected:!1,startPos:n,posArray:o,hits:[],length:e,orientation:t,hit(e){return n=this.posArray,t=e,o=JSON.stringify(t),!!n.some((function(e){return JSON.stringify(e)===o}))&&(console.log("got hit"),this.hits.push(e),!0);var n,t,o},isSunk(){return this.hits.length==this.length},move(e){switch(e){case"right":this.startPos=[this.startPos[0]+1,this.startPos[1]],this.posArray=this.posArray.map((e=>[e[0]+1,e[1]]));break;case"left":this.startPos=[this.startPos[0]-1,this.startPos[1]],this.posArray=this.posArray.map((e=>[e[0]-1,e[1]]));break;case"down":this.startPos=[this.startPos[0],this.startPos[1]+1],this.posArray=this.posArray.map((e=>[e[0],e[1]+1]));break;case"up":this.startPos=[this.startPos[0],this.startPos[1]-1],this.posArray=this.posArray.map((e=>[e[0],e[1]-1]))}},rotate(){this.posArray.length=0,this.posArray=[this.startPos],"horizontal"==this.orientation?this.orientation="vertical":this.orientation="horizontal";for(let e=1;e<this.length;e++)"horizontal"==this.orientation?this.posArray.push([this.startPos[0]+e,this.startPos[1]]):"vertical"==this.orientation&&this.posArray.push([this.startPos[0],this.startPos[1]+e])}}}let n;function o(e){let n=document.createElement("div");n.className="grid";for(let t=0;t<10;t++)for(let o=0;o<10;o++){let r=document.createElement("div");r.className="unit",r.classList.add(e),r.id=o+"|"+t+"|"+e,n.appendChild(r)}return n}function r(){i(B().gameBoard.ships,"player"),i(v().gameBoard.ships,"computer"),s(B().gameBoard.hits,"player"),l(B().gameBoard.misses,"player"),s(v().gameBoard.hits,"computer"),l(v().gameBoard.misses,"computer")}function a(){let e=document.querySelectorAll(".ship");Array.from(e).forEach((e=>{e.classList.remove("ship"),e.classList.remove("selected")})),i(B().gameBoard.ships,"player"),i(v().gameBoard.ships,"computer")}function i(e,n){e.forEach((e=>[e.posArray.forEach((t=>{let o=t[0]+"|"+t[1]+"|"+n,r=document.getElementById(o);r.classList.add("ship"),e.selected&&r.classList.add("selected")}))]))}function s(e,n){e.forEach((e=>{let t=e[0]+"|"+e[1]+"|"+n,o=document.getElementById(t);for(o.classList.add("hit");o.firstChild;)o.removeChild(o.firstChild);let r=document.createElement("p");r.innerHTML="&#10005;",o.appendChild(r)}))}function l(e,n){e.forEach((e=>{let t=e[0]+"|"+e[1]+"|"+n,o=document.getElementById(t);for(o.classList.add("miss");o.firstChild;)o.removeChild(o.firstChild);let r=document.createElement("p");o.appendChild(r)}))}function c(e){let n=[];e.posArray.forEach((e=>{let t=e[0]+"|"+e[1]+"|player",o=document.getElementById(t);n.push(o)})),n.forEach((e=>{e.classList.add("highlighted")})),n.forEach((e=>{setTimeout((()=>{e.classList.remove("highlighted")}),100)}))}function d(){function n(e,n){var t=JSON.stringify(n);return e.some((function(e){return JSON.stringify(e)===t}))}return{ships:[],hits:[],misses:[],placeShip(t,o,r){let a=!1,i=e(t,o,r);this.ships.forEach((e=>{e.posArray.forEach((e=>{n(i.posArray,e)&&(a=!0)}))})),a||this.ships.push(i)},receiveAttack(e){let n=!1;this.ships.forEach((t=>{t.hit(e)&&(this.hits.push(e),n=!0)})),n||this.misses.push(e)},allSunk(){let e=!0;return this.ships.forEach((n=>{n.isSunk()||(e=!1)})),e},move(t,o){let r,a=!0;switch(o){case"right":r=e(t.length,[t.posArray[0][0]+1,t.posArray[0][1]],t.orientation);break;case"left":r=e(t.length,[t.posArray[0][0]-1,t.posArray[0][1]],t.orientation);break;case"down":r=e(t.length,[t.posArray[0][0],t.posArray[0][1]+1],t.orientation);break;case"up":r=e(t.length,[t.posArray[0][0],t.posArray[0][1]-1],t.orientation)}this.ships.forEach((e=>{e!=t&&e.posArray.forEach((e=>{n(r.posArray,e)&&(console.log("anothership in the way!!!"),a=!1)})),r.posArray.forEach((e=>{(e[0]>9||e[1]>9||e[0]<0||e[1]<0)&&(console.log("reached the border!!"),a=!1)}))})),console.log("can move:"+a+" in "+o),a?(t.move(o),console.log(this.ships)):c(t)},rotate(t){let o,r=!0;o="horizontal"==t.orientation?e(t.length,t.posArray[0],"vertical"):e(t.length,t.posArray[0],"horizontal"),this.ships.forEach((e=>{e!=t&&e.posArray.forEach((e=>{n(o.posArray,e)&&(console.log("anothership in the way!!!"),r=!1)})),o.posArray.forEach((e=>{(e[0]>9||e[1]>9||e[0]<0||e[1]<0)&&(console.log("reached the border!!"),r=!1)}))})),console.log("can rotate: "+r),r?(t.rotate(),console.log(this.ships)):c(t)}}}function A(e,n,t){function o(e,n){var t=JSON.stringify(n);return e.some((function(e){return JSON.stringify(e)===t}))}return t?{gameBoard:e,enemyGameboard:n,tries:[],attackEnemy(){let e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];for(;o(this.tries,e);)e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];this.tries.push(e),n.receiveAttack(e)}}:{gameBoard:e,enemyGameboard:n,tries:[],attackEnemy(e){o(this.tries,e)||(n.receiveAttack(e),this.tries.push(e))}}}let h,p,u,m,f="player",g=!1,y=!1;function C(){h=d(),p=d(),h.placeShip(5,[0,0],"vertical"),h.placeShip(4,[1,0],"vertical"),h.placeShip(3,[2,0],"vertical"),h.placeShip(3,[3,0],"vertical"),h.placeShip(2,[4,0],"vertical"),function(){for(p.placeShip(5,[Math.floor(5*Math.random()),Math.floor(5*Math.random())],Math.random()>.5?"horizontal":"vertical");2!=p.ships.length;)p.placeShip(4,[Math.floor(6*Math.random()),Math.floor(6*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;3!=p.ships.length;)p.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;4!=p.ships.length;)p.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;5!=p.ships.length;)p.placeShip(2,[Math.floor(8*Math.random()),Math.floor(8*Math.random())],Math.random()>.5?"horizontal":"vertical")}(),u=A(h,p,!1),m=A(p,h,!0),u.attackEnemy([0,1]),u.attackEnemy([5,5]),m.attackEnemy(),m.attackEnemy(),function(){let e=document.querySelector("body");!function(){let e=document.querySelector("body"),n=document.createElement("div");n.id="instructions",n.className="modal";let t=document.createElement("div");t.className="modal-content";let o=document.createElement("span");o.className="close",o.id="close-instructions-button",o.innerHTML="&times;";let r=document.createElement("h3");r.innerHTML="Welcome to Battleship",r.id="instructions-title";let a=document.createElement("h4");a.innerHTML="Game Objective",a.className="instructions-header";let i=document.createElement("p");i.className="description",i.innerHTML="The objective of Battleship is to try and sink all of the opponent's    ships before they sink all of your ships. All of the opponent's ships are hidden somewhere    on their board. <br/><br/>Each round, you try and hit the opponent's ships by selecting a coordinate of one of the squares    on the board. The opponent also tries to hit your ships by selecting coordinates. Neither you nor    the opponent can see the other's board so you must guess where they are. Each board has two grids:    the left section for the player's ships and the right section for the opponent's ships.";let s=document.createElement("h4");s.innerHTML="Starting a New Game",s.className="instructions-header";let l=document.createElement("p");l.className="description",l.innerHTML='Each player places the 5 ships somwhere on their board. A ship may be moved    by clicking on the ship, then using the arrow keys to move it up, down, right, or left, and using the space bar to     rotate the ship.<br/><br/> The ships can    only be placed vertically or horizontally. Diagonal placement is not allowed. No part of a ship may hang    off the edge of the board. Ships may not overlap each other. No ships may be placed on another ship.     Once the guessing begins, players may not move the ships. The 5 ships are:  Carrier (occupies 5 spaces),    Battleship (4), Cruiser (3), Submarine (3), and Destroyer (2). <br/><br/> When you are ready, click "start" to begin    the game.';let c=document.createElement("h4");c.innerHTML="Playing the Game",c.className="instructions-header";let d=document.createElement("p");d.className="description",d.innerHTML="Each round, a player makes a guess by selecting coordinates on the opponent's grid.    If the guessed coordinate hits an enemy ship, the grid will be marked with a red X. If the guess misses, the grid will be    marked with a white dot. For example, if you guess (1,6) and the opponent does not have any ship located at (1,6), the     opponent's grid would be marked with a white dot at (1,6).<br/><br/> When all of the squares that one of your ships occupies are hit    the ship will be sunk, and this will be indicated to both players. As soon as all of one player's ships have been sunk, the     game ends. <br/><br/>To start a new game, or to reset at any point within a game, click \"reset\".",t.appendChild(o),t.appendChild(r),t.appendChild(a),t.appendChild(i),t.appendChild(s),t.appendChild(l),t.appendChild(c),t.appendChild(d),n.appendChild(t),e.appendChild(n)}(),function(){let e=document.querySelector("body"),n=document.createElement("div");n.id="gameOver",n.className="modal",n.style.display="none";let t=document.createElement("div");t.className="modal-content",t.innerHTML="Game Over";let o=document.createElement("span");o.className="close",o.id="close-game-button",o.innerHTML="&times;",t.appendChild(o),n.appendChild(t),e.appendChild(n)}();let t=document.createElement("header");t.innerHTML="Battleship",t.id="header";let i=document.createElement("h1");i.innerHTML="Place your Ships!",i.id="secondary";let s=document.createElement("button");s.innerHTML="Start",s.id="start-button";let l=document.createElement("div");l.id="main-body";let c=function(){let e=document.createElement("div");e.className="game-board",e.id="player-board";let n=o("player"),t=document.createElement("p");return t.innerHTML="Player",t.className="board-name",e.appendChild(n),e.appendChild(t),e}(),d=function(){let e=document.createElement("div");e.className="game-board",e.id="computer-board";let n=o("computer"),t=document.createElement("p");return t.innerHTML="Computer",t.className="board-name",e.appendChild(n),e.appendChild(t),e}();l.appendChild(c),l.appendChild(d);let A=document.createElement("button");A.innerHTML="Help",A.id="help-button",e.appendChild(t),e.appendChild(i),e.appendChild(s),e.appendChild(l),e.appendChild(A),r(),function(){let e=document.getElementById("start-button");e.addEventListener("click",(()=>{if("Start"==e.innerHTML)g=!0,console.log("Game started!!!!"),e.innerHTML="Reset";else if("Reset"==e.innerHTML){e.innerHTML="Start";let n=document.querySelector("body");for(;n.firstChild;)n.removeChild(n.firstChild);g=!1,y=!1,f="player",C(),document.getElementById("instructions").style.display="none"}})),document.getElementById("computer-board").addEventListener("click",(e=>{!E()&&I()&&e.target.classList.contains("unit")&&"player"==f&&function(e){let n=e.split("|");console.log("attack clicked!");let t=[parseInt(n[0]),parseInt(n[1])];var o,a,i;"computer"!=n[2]||(o=B().tries,a=t,i=JSON.stringify(a),o.some((function(e){return JSON.stringify(e)===i})))||(B().attackEnemy(t),r(),b())}(e.target.id)})),document.getElementById("player-board").addEventListener("click",(e=>{E()||I()||!e.target.classList.contains("ship")||function(e){let t=e.target.id.split("|");if("player"==t[2]){let o=[parseInt(t[0]),parseInt(t[1])];B().gameBoard.ships.forEach((e=>{e.selected=!1,e.posArray.forEach((t=>{JSON.stringify(o)==JSON.stringify(t)&&(n=e)}))})),n.selected=!0,a(),e.stopPropagation()}}(e)})),window.addEventListener("click",(e=>{B().gameBoard.ships.forEach((e=>{e.selected=!1,a()}))})),window.addEventListener("keydown",(function(e){if(!e.defaultPrevented){if(void 0!==n&&!I()){switch(e.key){case"ArrowDown":B().gameBoard.move(n,"down");break;case"ArrowUp":B().gameBoard.move(n,"up");break;case"ArrowLeft":B().gameBoard.move(n,"left");break;case"ArrowRight":B().gameBoard.move(n,"right");break;case" ":B().gameBoard.rotate(n);break;default:return}a()}e.preventDefault()}}),!0),function(){let e=document.getElementById("instructions"),n=document.getElementById("close-instructions-button");document.getElementById("help-button").onclick=function(){e.style.display="block"},n.onclick=function(){e.style.display="none"},window.onclick=function(n){n.target==e&&(e.style.display="none")}}()}()}()}async function b(){p.allSunk()||h.allSunk()?(f="computer",y=!0,console.log("Game Ended"),function(){let e=document.getElementById("gameOver"),n=document.getElementById("close-game-button");e.style.display="block",n.onclick=function(){e.style.display="none"},window.onclick=function(n){n.target==e&&(e.style.display="none")}}()):(f="computer",await(0,new Promise((e=>setTimeout(e,0)))),m.attackEnemy(),r(),f="player")}function B(){return u}function v(){return m}function I(){return g}function E(){return y}var k=t(379),w=t.n(k),x=t(795),M=t.n(x),S=t(569),L=t.n(S),T=t(565),N=t.n(T),z=t(216),P=t.n(z),H=t(589),O=t.n(H),j=t(426),q={};q.styleTagTransform=O(),q.setAttributes=N(),q.insert=L().bind(null,"head"),q.domAPI=M(),q.insertStyleElement=P(),w()(j.Z,q),j.Z&&j.Z.locals&&j.Z.locals,C()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPNEMsRUFHWCxTQUFTaUMsSUFDTCxPQUFPL0IsRUFHWCxTQUFTOEIsSUFDTCxPQUFPN0IsRSx5SENuSFA1SixFQUFVLEdBRWRBLEVBQVErQyxrQkFBb0IsSUFDNUIvQyxFQUFReUMsY0FBZ0IsSUFFbEJ6QyxFQUFReUIsT0FBUyxTQUFjLEtBQU0sUUFFM0N6QixFQUFRZSxPQUFTLElBQ2pCZixFQUFROEMsbUJBQXFCLElBRWhCLElBQUksSUFBUzlDLEdBS0osS0FBVyxZQUFpQixXQ25CbEQ2SixLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9ET00uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9HYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9QbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9HYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbmJvZHkge1xcbiAgICBkaXNwbGF5OmZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiTW9udHNlcnJhdFxcXCIsIHNhbnMtc2VyaWY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzUsIDIzNSwgMjI5KTtcXG4gICAgZm9udC13ZWlnaHQ6MTAwO1xcbn1cXG5cXG5oZWFkZXIge1xcbiAgICBmb250LXNpemU6IDEydmg7XFxufVxcblxcbiNzZWNvbmRhcnkge1xcbiAgICBmb250LXNpemU6IDR2aDtcXG59XFxuI21haW4tYm9keSB7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OmNlbnRlcjtcXG4gICAgZ2FwOjEwdnc7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmdhbWUtYm9hcmQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uZ3JpZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gICAgd2lkdGg6IDM5OHB4O1xcbiAgICBoZWlnaHQ6IDM5OHB4O1xcbiAgICBnYXA6MnB4O1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICBib3JkZXItd2lkdGg6IDJweDtcXG4gICAgcGFkZGluZzogMXB4O1xcbn1cXG5cXG4vKiBDb2xvciBjb2RpbmcgKi9cXG4uc2VsZWN0ZWQge1xcbiAgICBvcGFjaXR5Oi41O1xcbn1cXG5cXG4ucGxheWVyLnNoaXA6aG92ZXIge1xcbiAgICBvcGFjaXR5OiAuNTtcXG59XFxuXFxuLmNvbXB1dGVyOmhvdmVyIHtcXG4gICAgb3BhY2l0eTouNTtcXG59XFxuXFxuLnVuaXQge1xcblxcbiAgICB3aWR0aDogMzZweDtcXG4gICAgaGVpZ2h0OiAzNnB4O1xcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2JjZTJmMSA7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjYWFhYWFhO1xcbiAgICAvKiAyMCBsaW5lcywgYW5kIDkgZ2FwcyovXFxufVxcblxcbi5zaGlwIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNTMsIDE1MSwgMTQ3LCAwLjc5NSk7XFxuICAgIFxcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4ubWlzcyB7XFxuICAgIC8qIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi9pbWFnZXMvc3BsYXNoLnBuZycpO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47ICovXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gICAgZGlzcGxheTogZmxleDsgXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxufVxcblxcbi5taXNzIHAge1xcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgaGVpZ2h0OiA1cHg7XFxuICAgIHdpZHRoOjVweDtcXG59XFxuXFxuLmhpdCB7XFxuICAgIC8qIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi9pbWFnZXMvZmxhbWUucG5nJyk7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjsgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0MCwgMTI0LCAxMjQpO1xcbiAgICBkaXNwbGF5OiBmbGV4OyBcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmhpdDpob3ZlciB7XFxuICAgIG9wYWNpdHk6MTtcXG59XFxuXFxuLm1pc3M6aG92ZXJ7XFxuICAgIG9wYWNpdHk6MTtcXG59XFxuXFxuLmhpZ2hsaWdodGVkIHtcXG4gICAgYm9yZGVyLWNvbG9yOiByZWQ7XFxufVxcblxcblxcblxcblxcbi8qSW5zdHJ1Y3Rpb24gU2NyZWVuKi9cXG4jaW5zdHJ1Y3Rpb25zLXRpdGxlIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDJ2dztcXG59XFxuLmluc3RydWN0aW9ucy1oZWFkZXIge1xcbiAgICBmb250LXNpemU6IDF2dztcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJSYWxld2F5XFxcIiwgc2Fucy1zZXJpZjtcXG5cXG59XFxuXFxuLmRlc2NyaXB0aW9uIHtcXG59XFxuLm1vZGFsIHtcXG4gICAgZGlzcGxheTogYmxvY2s7IC8qIEhpZGRlbiBieSBkZWZhdWx0ICovXFxuICAgIHBvc2l0aW9uOiBmaXhlZDsgLyogU3RheSBpbiBwbGFjZSAqL1xcbiAgICB6LWluZGV4OiAxOyAvKiBTaXQgb24gdG9wICovXFxuICAgIHBhZGRpbmctdG9wOiAxMDBweDsgLyogTG9jYXRpb24gb2YgdGhlIGJveCAqL1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIHdpZHRoOiAxMDAlOyAvKiBGdWxsIHdpZHRoICovXFxuICAgIGhlaWdodDogMTAwJTsgLyogRnVsbCBoZWlnaHQgKi9cXG4gICAgb3ZlcmZsb3c6IGF1dG87IC8qIEVuYWJsZSBzY3JvbGwgaWYgbmVlZGVkICovXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigwLDAsMCk7IC8qIEZhbGxiYWNrIGNvbG9yICovXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC40KTsgLyogQmxhY2sgdy8gb3BhY2l0eSAqL1xcbiAgfVxcblxcbiAgLyogTW9kYWwgQ29udGVudCAqL1xcbiAgLm1vZGFsLWNvbnRlbnQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNWY1O1xcbiAgICBtYXJnaW46IGF1dG87XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM4ODg7XFxuICAgIHdpZHRoOiAzMHZ3O1xcbiAgICBoZWlnaHQ6IDcwdmg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIG92ZXJmbG93LXk6YXV0b1xcbiAgIFxcbiAgfVxcblxcbiAgIC8qIFRoZSBDbG9zZSBCdXR0b24gKi9cXG4gICAuY2xvc2Uge1xcbiAgICBjb2xvcjogI2FhYWFhYTtcXG4gICAgZmxvYXQ6IHJpZ2h0O1xcbiAgICBmb250LXNpemU6IDI4cHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgfVxcbiAgXFxuICAuY2xvc2U6aG92ZXIsXFxuICAuY2xvc2U6Zm9jdXMge1xcbiAgICBjb2xvcjogIzAwMDtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICB9XFxuXFxuLyogR2VuZXJhbCovIFxcbmJ1dHRvbiB7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiTW9udHNlcnJhdFxcXCIsIHNhbnMtc2VyaWY7XFxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgIGZvbnQtc2l6ZTogM3ZoO1xcbiAgICB3aWR0aDogNWVtO1xcbn1cXG5cXG4jc3RhcnQtYnV0dG9uIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG59XFxuXFxuI2hlbHAtYnV0dG9uIHtcXG4gICAgZm9udC1zaXplOiAydmg7XFxufVxcblxcbi5ib2FyZC1uYW1lIHtcXG4gICAgZm9udC1zaXplOiA0dmg7XFxufVxcblxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQUNBO0lBQ0ksWUFBWTtJQUNaLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIscUNBQXFDO0lBQ3JDLG9DQUFvQztJQUNwQyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7QUFDQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLFFBQVE7SUFDUixlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qix1QkFBdUI7SUFDdkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGVBQWU7SUFDZixZQUFZO0lBQ1osYUFBYTtJQUNiLE9BQU87SUFDUCxtQkFBbUI7SUFDbkIsaUJBQWlCO0lBQ2pCLFlBQVk7QUFDaEI7O0FBRUEsaUJBQWlCO0FBQ2pCO0lBQ0ksVUFBVTtBQUNkOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksVUFBVTtBQUNkOztBQUVBOztJQUVJLFdBQVc7SUFDWCxZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQiwwQkFBMEI7SUFDMUIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSw0Q0FBNEM7O0lBRTVDLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJOytCQUMyQjtJQUMzQixvQ0FBb0M7SUFDcEMsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsbUJBQW1COztBQUV2Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsV0FBVztJQUNYLFNBQVM7QUFDYjs7QUFFQTtJQUNJOytCQUMyQjtJQUMzQixvQ0FBb0M7SUFDcEMsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixrQkFBa0I7SUFDbEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksU0FBUztBQUNiOztBQUVBO0lBQ0ksU0FBUztBQUNiOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOzs7OztBQUtBLHFCQUFxQjtBQUNyQjtJQUNJLGtCQUFrQjtJQUNsQixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxjQUFjO0lBQ2Qsa0NBQWtDOztBQUV0Qzs7QUFFQTtBQUNBO0FBQ0E7SUFDSSxjQUFjLEVBQUUsc0JBQXNCO0lBQ3RDLGVBQWUsRUFBRSxrQkFBa0I7SUFDbkMsVUFBVSxFQUFFLGVBQWU7SUFDM0Isa0JBQWtCLEVBQUUsd0JBQXdCO0lBQzVDLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVyxFQUFFLGVBQWU7SUFDNUIsWUFBWSxFQUFFLGdCQUFnQjtJQUM5QixjQUFjLEVBQUUsNEJBQTRCO0lBQzVDLDRCQUE0QixFQUFFLG1CQUFtQjtJQUNqRCxpQ0FBaUMsRUFBRSxxQkFBcUI7RUFDMUQ7O0VBRUEsa0JBQWtCO0VBQ2xCO0lBQ0UseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLFdBQVc7SUFDWCxZQUFZO0lBQ1osbUJBQW1CO0lBQ25COztFQUVGOztHQUVDLHFCQUFxQjtHQUNyQjtJQUNDLGNBQWM7SUFDZCxZQUFZO0lBQ1osZUFBZTtJQUNmLGlCQUFpQjtFQUNuQjs7RUFFQTs7SUFFRSxXQUFXO0lBQ1gscUJBQXFCO0lBQ3JCLGVBQWU7RUFDakI7O0FBRUYsV0FBVztBQUNYO0lBQ0kscUNBQXFDO0lBQ3JDLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsVUFBVTtBQUNkOztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuYm9keSB7XFxuICAgIGRpc3BsYXk6ZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJNb250c2VycmF0XFxcIiwgc2Fucy1zZXJpZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzNSwgMjM1LCAyMjkpO1xcbiAgICBmb250LXdlaWdodDoxMDA7XFxufVxcblxcbmhlYWRlciB7XFxuICAgIGZvbnQtc2l6ZTogMTJ2aDtcXG59XFxuXFxuI3NlY29uZGFyeSB7XFxuICAgIGZvbnQtc2l6ZTogNHZoO1xcbn1cXG4jbWFpbi1ib2R5IHtcXG4gICAgd2lkdGg6IDEwMHZ3O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO1xcbiAgICBnYXA6MTB2dztcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbn1cXG5cXG4uZ2FtZS1ib2FyZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5ncmlkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICB3aWR0aDogMzk4cHg7XFxuICAgIGhlaWdodDogMzk4cHg7XFxuICAgIGdhcDoycHg7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci13aWR0aDogMnB4O1xcbiAgICBwYWRkaW5nOiAxcHg7XFxufVxcblxcbi8qIENvbG9yIGNvZGluZyAqL1xcbi5zZWxlY3RlZCB7XFxuICAgIG9wYWNpdHk6LjU7XFxufVxcblxcbi5wbGF5ZXIuc2hpcDpob3ZlciB7XFxuICAgIG9wYWNpdHk6IC41O1xcbn1cXG5cXG4uY29tcHV0ZXI6aG92ZXIge1xcbiAgICBvcGFjaXR5Oi41O1xcbn1cXG5cXG4udW5pdCB7XFxuXFxuICAgIHdpZHRoOiAzNnB4O1xcbiAgICBoZWlnaHQ6IDM2cHg7XFxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgIGJvcmRlci13aWR0aDogMXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmNlMmYxIDtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICBib3JkZXItY29sb3I6ICNhYWFhYWE7XFxuICAgIC8qIDIwIGxpbmVzLCBhbmQgOSBnYXBzKi9cXG59XFxuXFxuLnNoaXAge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE1MywgMTUxLCAxNDcsIDAuNzk1KTtcXG4gICAgXFxuICAgIGJvcmRlci1jb2xvcjogYmxhY2s7XFxufVxcblxcbi5taXNzIHtcXG4gICAgLyogYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuL2ltYWdlcy9zcGxhc2gucG5nJyk7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjsgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcbiAgICBkaXNwbGF5OiBmbGV4OyBcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG59XFxuXFxuLm1pc3MgcCB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcbiAgICBoZWlnaHQ6IDVweDtcXG4gICAgd2lkdGg6NXB4O1xcbn1cXG5cXG4uaGl0IHtcXG4gICAgLyogYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuL2ltYWdlcy9mbGFtZS5wbmcnKTtcXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb250YWluOyAqL1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQwLCAxMjQsIDEyNCk7XFxuICAgIGRpc3BsYXk6IGZsZXg7IFxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uaGl0OmhvdmVyIHtcXG4gICAgb3BhY2l0eToxO1xcbn1cXG5cXG4ubWlzczpob3ZlcntcXG4gICAgb3BhY2l0eToxO1xcbn1cXG5cXG4uaGlnaGxpZ2h0ZWQge1xcbiAgICBib3JkZXItY29sb3I6IHJlZDtcXG59XFxuXFxuXFxuXFxuXFxuLypJbnN0cnVjdGlvbiBTY3JlZW4qL1xcbiNpbnN0cnVjdGlvbnMtdGl0bGUge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMnZ3O1xcbn1cXG4uaW5zdHJ1Y3Rpb25zLWhlYWRlciB7XFxuICAgIGZvbnQtc2l6ZTogMXZ3O1xcbiAgICBmb250LWZhbWlseTogXFxcIlJhbGV3YXlcXFwiLCBzYW5zLXNlcmlmO1xcblxcbn1cXG5cXG4uZGVzY3JpcHRpb24ge1xcbn1cXG4ubW9kYWwge1xcbiAgICBkaXNwbGF5OiBibG9jazsgLyogSGlkZGVuIGJ5IGRlZmF1bHQgKi9cXG4gICAgcG9zaXRpb246IGZpeGVkOyAvKiBTdGF5IGluIHBsYWNlICovXFxuICAgIHotaW5kZXg6IDE7IC8qIFNpdCBvbiB0b3AgKi9cXG4gICAgcGFkZGluZy10b3A6IDEwMHB4OyAvKiBMb2NhdGlvbiBvZiB0aGUgYm94ICovXFxuICAgIGxlZnQ6IDA7XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6IDEwMCU7IC8qIEZ1bGwgd2lkdGggKi9cXG4gICAgaGVpZ2h0OiAxMDAlOyAvKiBGdWxsIGhlaWdodCAqL1xcbiAgICBvdmVyZmxvdzogYXV0bzsgLyogRW5hYmxlIHNjcm9sbCBpZiBuZWVkZWQgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsMCwwKTsgLyogRmFsbGJhY2sgY29sb3IgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjQpOyAvKiBCbGFjayB3LyBvcGFjaXR5ICovXFxuICB9XFxuXFxuICAvKiBNb2RhbCBDb250ZW50ICovXFxuICAubW9kYWwtY29udGVudCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNGY1ZjU7XFxuICAgIG1hcmdpbjogYXV0bztcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzg4ODtcXG4gICAgd2lkdGg6IDMwdnc7XFxuICAgIGhlaWdodDogNzB2aDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgb3ZlcmZsb3cteTphdXRvXFxuICAgXFxuICB9XFxuXFxuICAgLyogVGhlIENsb3NlIEJ1dHRvbiAqL1xcbiAgIC5jbG9zZSB7XFxuICAgIGNvbG9yOiAjYWFhYWFhO1xcbiAgICBmbG9hdDogcmlnaHQ7XFxuICAgIGZvbnQtc2l6ZTogMjhweDtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB9XFxuICBcXG4gIC5jbG9zZTpob3ZlcixcXG4gIC5jbG9zZTpmb2N1cyB7XFxuICAgIGNvbG9yOiAjMDAwO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gIH1cXG5cXG4vKiBHZW5lcmFsKi8gXFxuYnV0dG9uIHtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJNb250c2VycmF0XFxcIiwgc2Fucy1zZXJpZjtcXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gICAgZm9udC1zaXplOiAzdmg7XFxuICAgIHdpZHRoOiA1ZW07XFxufVxcblxcbiNzdGFydC1idXR0b24ge1xcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbn1cXG5cXG4jaGVscC1idXR0b24ge1xcbiAgICBmb250LXNpemU6IDJ2aDtcXG59XFxuXFxuLmJvYXJkLW5hbWUge1xcbiAgICBmb250LXNpemU6IDR2aDtcXG59XFxuXFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNbX2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgbW9kdWxlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pMl0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJmdW5jdGlvbiBjcmVhdGVTaGlwKCBsZW5ndGggLCBzdGFydFBvcywgb3JpZW50YXRpb24gKSB7XG5cbiAgICBsZXQgcG9zQXJyYXkgPSBbIHN0YXJ0UG9zIF07XG5cbiAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICAgIHBvc0FycmF5LnB1c2goIFsgc3RhcnRQb3NbMF0rIGksIHN0YXJ0UG9zWzFdXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIG9yaWVudGF0aW9uID09IFwidmVydGljYWxcIikge1xuICAgICAgICAgICAgcG9zQXJyYXkucHVzaCggW3N0YXJ0UG9zWzBdLCBzdGFydFBvc1sxXSArIGldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXlJbkFycmF5KGFyciwgaXRlbSl7XG4gICAgICAgIHZhciBpdGVtX2FzX3N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0pO1xuICAgICAgXG4gICAgICAgIHZhciBjb250YWlucyA9IGFyci5zb21lKGZ1bmN0aW9uKGVsZSl7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVsZSkgPT09IGl0ZW1fYXNfc3RyaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zO1xuICAgICAgfVxuICAgICAgXG4gICAgXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgIHN0YXJ0UG9zOnN0YXJ0UG9zLFxuICAgICAgICBwb3NBcnJheSA6IHBvc0FycmF5LFxuICAgICAgICBoaXRzOiBbXSxcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgICAgLy9wb3NpdGlvbiBzaG91bGQgYmUgYW4gYXJyYXlcbiAgICAgICAgaGl0KCBwb3NpdGlvbikge1xuICAgICAgICAgICAgIGlmIChpc0FycmF5SW5BcnJheSggdGhpcy5wb3NBcnJheSwgcG9zaXRpb24gKSApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImdvdCBoaXRcIilcbiAgICAgICAgICAgICAgICB0aGlzLmhpdHMucHVzaCggcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpc1N1bmsoKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMuaGl0cy5sZW5ndGggPT0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vdmUoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBzd2l0Y2goZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQb3MgPSBbIHRoaXMuc3RhcnRQb3NbMF0gKzEsIHRoaXMuc3RhcnRQb3NbMV0gXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NBcnJheSA9IHRoaXMucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdICsgMSwgeFsxXSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQb3MgPSBbIHRoaXMuc3RhcnRQb3NbMF0tMSwgdGhpcy5zdGFydFBvc1sxXSBdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc0FycmF5ID0gdGhpcy5wb3NBcnJheS5tYXAoIHggPT4gW3hbMF0gLSAxLCB4WzFdIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRvd25cIjpcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLnN0YXJ0UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFBvcyA9IFsgdGhpcy5zdGFydFBvc1swXSwgdGhpcy5zdGFydFBvc1sxXSAgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NBcnJheSA9IHRoaXMucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdICwgeFsxXSArMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codGhpcy5wb3NBcnJheSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ1cFwiIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFBvcyA9IFsgdGhpcy5zdGFydFBvc1swXSwgdGhpcy5zdGFydFBvc1sxXSAgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NBcnJheSA9IHRoaXMucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdICwgeFsxXSAtMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG4gICAgICAgIHJvdGF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMucG9zQXJyYXkubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHRoaXMucG9zQXJyYXkgPSBbIHRoaXMuc3RhcnRQb3MgXTtcbiAgICAgICAgICAgIGlmICggdGhpcy5vcmllbnRhdGlvbiA9PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBcInZlcnRpY2FsXCI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gXCJob3Jpem9udGFsXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoIGxldCBpID0gMTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcmllbnRhdGlvbiA9PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc0FycmF5LnB1c2goIFsgdGhpcy5zdGFydFBvc1swXSsgaSwgdGhpcy5zdGFydFBvc1sxXV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICggdGhpcy5vcmllbnRhdGlvbiA9PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NBcnJheS5wdXNoKCBbdGhpcy5zdGFydFBvc1swXSwgdGhpcy5zdGFydFBvc1sxXSArIGldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICBcblxuICAgIH1cbn1cblxuZXhwb3J0IHtjcmVhdGVTaGlwfTsiLCIvL2ZpcnN0IGNyZWF0ZSBhIGZyYW1lIHRoYXQgc3RheXMgc3RhdGljIHRocm91Z2hvdXRcbmltcG9ydCB7IGNoZWNrV2lubmVyLCBnZXRQbGF5ZXIsIGdldENvbXB1dGVyLCBnZXRUdXJuLCBzdGFydCwgZ2V0R2FtZVN0YXJ0ZWQsIGdldEdhbWVFbmRlZCAsIHJlc2V0IH0gZnJvbSBcIi4vR2FtZS5qc1wiO1xuLy9pbXBvcnQgZmxhbWUgZnJvbSBcIi4vaW1hZ2VzL2ZsYW1lLnBuZ1wiO1xuLy9pbXBvcnQgeyBwbGF5ZXIsIGNvbXB1dGVyLCB0dXJufSBmcm9tIFwiLi9HYW1lLmpzXCI7XG5sZXQgc2VsZWN0ZWRTaGlwO1xuXG5mdW5jdGlvbiBjcmVhdGVNYWluKCkge1xuXG5cbiAgICBsZXQgZG9jdW1lbnRCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG5cbiAgICAvL2xldCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAvL2NvbnRlbnQuaWQgPSBcImNvbnRlbnRcIjtcblxuICAgIC8vaW5zdHJ1Y3Rpb24gc2NyZWVuXG4gICAgY3JlYXRlSW5zdHJ1Y3Rpb25zKCk7XG4gICAgZ2FtZU92ZXJTY3JlZW4oKTtcblxuXG4gICAgLy8gPGRpdiBpZD1cIm15TW9kYWxcIiBjbGFzcz1cIm1vZGFsXCI+XG5cbiAgICAvLyAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAvLyAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xvc2VcIj4mdGltZXM7PC9zcGFuPlxuICAgIC8vICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm1cIj5cbiAgICAvLyAgICAgICAgICAgICA8cD5BZGQgTmV3IEJvb2s8L3A+XG4gICAgLy8gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCIgVGl0bGVcIiBuYW1lPVwidGl0bGVcIiBpZD1cIm15VGl0bGVcIiByZXF1aXJlZD5cbiAgICAvLyAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIiBBdXRob3JcIiBuYW1lPVwiYXV0aG9yXCIgaWQ9XCJteUF1dGhvclwiIHJlcXVpcmVkPlxuICAgIC8vICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgcGxhY2Vob2xkZXI9XCIgUGFnZXNcIiBuYW1lPVwicGFnZXNcIiBpZD1cIm15UGFnZXNcIiByZXF1aXJlZD5cbiAgICAvLyAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVhZC1jb250YWluZXJcIj5cbiAgICAvLyAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInJlYWRcIj5SZWFkL1VucmVhZDwvbGFiZWw+XG4gICAgLy8gICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicmVhZE9yTm90XCIgdmFsdWU9XCJyZWFkXCIgaWQ9XCJteVJlYWRcIj5cblxuICAgIC8vICAgICAgICAgICAgIDwvZGl2PlxuICAgIC8vICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJmb3JtLXN1Ym1pdFwiIHR5cGU9XCJidXR0b25cIj5TdWJtaXQ8L2J1dHRvbj5cbiAgICAvLyAgICAgICAgIDwvZGl2PlxuICAgIC8vICAgICA8L2Rpdj5cblxuICAgIC8vIDwvZGl2PlxuXG4gICAgbGV0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoZWFkZXJcIik7XG4gICAgaGVhZGVyLmlubmVySFRNTCA9IFwiQmF0dGxlc2hpcFwiO1xuICAgIGhlYWRlci5pZCA9IFwiaGVhZGVyXCI7XG5cbiAgICBsZXQgc2Vjb25kYXJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICAgIHNlY29uZGFyeS5pbm5lckhUTUwgPSBcIlBsYWNlIHlvdXIgU2hpcHMhXCI7XG4gICAgc2Vjb25kYXJ5LmlkID0gXCJzZWNvbmRhcnlcIjtcblxuICAgIGxldCBzdGFydEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgc3RhcnRCdG4uaW5uZXJIVE1MID0gXCJTdGFydFwiO1xuICAgIHN0YXJ0QnRuLmlkID0gXCJzdGFydC1idXR0b25cIjtcblxuICAgIGxldCBtYWluQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbWFpbkJvZHkuaWQgPSBcIm1haW4tYm9keVwiO1xuXG4gICAgbGV0IHBsYXllckJvYXJkID0gY3JlYXRlR2FtZUJvYXJkKCk7XG5cbiAgICBsZXQgY29tcHV0ZXJCb2FyZCA9IGNyZWF0ZUNvbXB1dGVyQm9hcmQoKTtcblxuICAgIG1haW5Cb2R5LmFwcGVuZENoaWxkKHBsYXllckJvYXJkKTtcbiAgICBtYWluQm9keS5hcHBlbmRDaGlsZChjb21wdXRlckJvYXJkKTtcblxuXG4gICAgbGV0IGhlbHBCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGhlbHBCdG4uaW5uZXJIVE1MID0gXCJIZWxwXCI7XG4gICAgaGVscEJ0bi5pZCA9IFwiaGVscC1idXR0b25cIjtcblxuICAgIGRvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChoZWFkZXIpO1xuICAgIGRvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChzZWNvbmRhcnkpO1xuICAgIGRvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChzdGFydEJ0bik7XG4gICAgZG9jdW1lbnRCb2R5LmFwcGVuZENoaWxkKG1haW5Cb2R5KTtcbiAgICBkb2N1bWVudEJvZHkuYXBwZW5kQ2hpbGQoaGVscEJ0bik7XG5cbiAgICAvL2RvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICB1cGRhdGUoKTtcblxuICAgIGNyZWF0ZUhhbmRsZXJzKCk7XG5cblxufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVjdGlvbnMoKSB7XG4gICAgbGV0IGRvY3VtZW50Qm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuXG4gICAgLy9sZXQgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgLy9jb250ZW50LmlkID0gXCJjb250ZW50XCI7XG5cbiAgICAvL2luc3RydWN0aW9uIHNjcmVlblxuICAgIGxldCBpbnN0cnVjdGlvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGluc3RydWN0aW9ucy5pZCA9IFwiaW5zdHJ1Y3Rpb25zXCI7XG4gICAgaW5zdHJ1Y3Rpb25zLmNsYXNzTmFtZSA9IFwibW9kYWxcIjtcblxuICAgIGxldCBpbnN0cnVjdGlvbnNDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBpbnN0cnVjdGlvbnNDb250ZW50LmNsYXNzTmFtZSA9IFwibW9kYWwtY29udGVudFwiO1xuXG4gICAgbGV0IGNsb3NlSW5zdHJ1Y3Rpb25zQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgY2xvc2VJbnN0cnVjdGlvbnNCdG4uY2xhc3NOYW1lID0gXCJjbG9zZVwiO1xuICAgIGNsb3NlSW5zdHJ1Y3Rpb25zQnRuLmlkID0gXCJjbG9zZS1pbnN0cnVjdGlvbnMtYnV0dG9uXCI7XG4gICAgY2xvc2VJbnN0cnVjdGlvbnNCdG4uaW5uZXJIVE1MID0gXCImdGltZXM7XCI7XG5cbiAgICBsZXQgaW5zdHJ1Y3Rpb25zVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgaW5zdHJ1Y3Rpb25zVGl0bGUuaW5uZXJIVE1MPVwiV2VsY29tZSB0byBCYXR0bGVzaGlwXCI7XG4gICAgaW5zdHJ1Y3Rpb25zVGl0bGUuaWQgPSBcImluc3RydWN0aW9ucy10aXRsZVwiO1xuXG4gICAgbGV0IGdhbWVPYmplY3RpdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDRcIik7XG4gICAgZ2FtZU9iamVjdGl2ZS5pbm5lckhUTUwgPSBcIkdhbWUgT2JqZWN0aXZlXCI7XG4gICAgZ2FtZU9iamVjdGl2ZS5jbGFzc05hbWUgPSBcImluc3RydWN0aW9ucy1oZWFkZXJcIjtcblxuICAgIGxldCBnYW1lT2JqZWN0aXZlRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBnYW1lT2JqZWN0aXZlRGVzY3JpcHRpb24uY2xhc3NOYW1lID0gXCJkZXNjcmlwdGlvblwiO1xuICAgIGdhbWVPYmplY3RpdmVEZXNjcmlwdGlvbi5pbm5lckhUTUwgPSBcIlRoZSBvYmplY3RpdmUgb2YgQmF0dGxlc2hpcCBpcyB0byB0cnkgYW5kIHNpbmsgYWxsIG9mIHRoZSBvcHBvbmVudCdzXFxcbiAgICBzaGlwcyBiZWZvcmUgdGhleSBzaW5rIGFsbCBvZiB5b3VyIHNoaXBzLiBBbGwgb2YgdGhlIG9wcG9uZW50J3Mgc2hpcHMgYXJlIGhpZGRlbiBzb21ld2hlcmVcXFxuICAgIG9uIHRoZWlyIGJvYXJkLiA8YnIvPjxici8+RWFjaCByb3VuZCwgeW91IHRyeSBhbmQgaGl0IHRoZSBvcHBvbmVudCdzIHNoaXBzIGJ5IHNlbGVjdGluZyBhIGNvb3JkaW5hdGUgb2Ygb25lIG9mIHRoZSBzcXVhcmVzXFxcbiAgICBvbiB0aGUgYm9hcmQuIFRoZSBvcHBvbmVudCBhbHNvIHRyaWVzIHRvIGhpdCB5b3VyIHNoaXBzIGJ5IHNlbGVjdGluZyBjb29yZGluYXRlcy4gTmVpdGhlciB5b3Ugbm9yXFxcbiAgICB0aGUgb3Bwb25lbnQgY2FuIHNlZSB0aGUgb3RoZXIncyBib2FyZCBzbyB5b3UgbXVzdCBndWVzcyB3aGVyZSB0aGV5IGFyZS4gRWFjaCBib2FyZCBoYXMgdHdvIGdyaWRzOlxcXG4gICAgdGhlIGxlZnQgc2VjdGlvbiBmb3IgdGhlIHBsYXllcidzIHNoaXBzIGFuZCB0aGUgcmlnaHQgc2VjdGlvbiBmb3IgdGhlIG9wcG9uZW50J3Mgc2hpcHMuXCJcblxuICAgIGxldCBzdGFydGluZ05ld0dhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDRcIik7XG4gICAgc3RhcnRpbmdOZXdHYW1lLmlubmVySFRNTCA9IFwiU3RhcnRpbmcgYSBOZXcgR2FtZVwiO1xuICAgIHN0YXJ0aW5nTmV3R2FtZS5jbGFzc05hbWUgPSBcImluc3RydWN0aW9ucy1oZWFkZXJcIjtcblxuICAgIGxldCBzdGFydGluZ05ld0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgc3RhcnRpbmdOZXdEZXNjcmlwdGlvbi5jbGFzc05hbWUgPSBcImRlc2NyaXB0aW9uXCI7XG4gICAgc3RhcnRpbmdOZXdEZXNjcmlwdGlvbi5pbm5lckhUTUwgPSBcIkVhY2ggcGxheWVyIHBsYWNlcyB0aGUgNSBzaGlwcyBzb213aGVyZSBvbiB0aGVpciBib2FyZC4gQSBzaGlwIG1heSBiZSBtb3ZlZFxcXG4gICAgYnkgY2xpY2tpbmcgb24gdGhlIHNoaXAsIHRoZW4gdXNpbmcgdGhlIGFycm93IGtleXMgdG8gbW92ZSBpdCB1cCwgZG93biwgcmlnaHQsIG9yIGxlZnQsIGFuZCB1c2luZyB0aGUgc3BhY2UgYmFyIHRvIFxcXG4gICAgcm90YXRlIHRoZSBzaGlwLjxici8+PGJyLz4gVGhlIHNoaXBzIGNhblxcXG4gICAgb25seSBiZSBwbGFjZWQgdmVydGljYWxseSBvciBob3Jpem9udGFsbHkuIERpYWdvbmFsIHBsYWNlbWVudCBpcyBub3QgYWxsb3dlZC4gTm8gcGFydCBvZiBhIHNoaXAgbWF5IGhhbmdcXFxuICAgIG9mZiB0aGUgZWRnZSBvZiB0aGUgYm9hcmQuIFNoaXBzIG1heSBub3Qgb3ZlcmxhcCBlYWNoIG90aGVyLiBObyBzaGlwcyBtYXkgYmUgcGxhY2VkIG9uIGFub3RoZXIgc2hpcC4gXFxcbiAgICBPbmNlIHRoZSBndWVzc2luZyBiZWdpbnMsIHBsYXllcnMgbWF5IG5vdCBtb3ZlIHRoZSBzaGlwcy4gVGhlIDUgc2hpcHMgYXJlOiAgQ2FycmllciAob2NjdXBpZXMgNSBzcGFjZXMpLFxcXG4gICAgQmF0dGxlc2hpcCAoNCksIENydWlzZXIgKDMpLCBTdWJtYXJpbmUgKDMpLCBhbmQgRGVzdHJveWVyICgyKS4gPGJyLz48YnIvPiBXaGVuIHlvdSBhcmUgcmVhZHksIGNsaWNrIFxcXCJzdGFydFxcXCIgdG8gYmVnaW5cXFxuICAgIHRoZSBnYW1lLlwiXG5cbiAgICBsZXQgcGxheWluZ0dhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDRcIik7XG4gICAgcGxheWluZ0dhbWUuaW5uZXJIVE1MID0gXCJQbGF5aW5nIHRoZSBHYW1lXCI7XG4gICAgcGxheWluZ0dhbWUuY2xhc3NOYW1lID0gXCJpbnN0cnVjdGlvbnMtaGVhZGVyXCI7XG5cbiAgICBsZXQgcGxheWluZ0dhbWVEZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIHBsYXlpbmdHYW1lRGVzY3JpcHRpb24uY2xhc3NOYW1lID0gXCJkZXNjcmlwdGlvblwiO1xuICAgIHBsYXlpbmdHYW1lRGVzY3JpcHRpb24uaW5uZXJIVE1MID0gXCJFYWNoIHJvdW5kLCBhIHBsYXllciBtYWtlcyBhIGd1ZXNzIGJ5IHNlbGVjdGluZyBjb29yZGluYXRlcyBvbiB0aGUgb3Bwb25lbnQncyBncmlkLlxcXG4gICAgSWYgdGhlIGd1ZXNzZWQgY29vcmRpbmF0ZSBoaXRzIGFuIGVuZW15IHNoaXAsIHRoZSBncmlkIHdpbGwgYmUgbWFya2VkIHdpdGggYSByZWQgWC4gSWYgdGhlIGd1ZXNzIG1pc3NlcywgdGhlIGdyaWQgd2lsbCBiZVxcXG4gICAgbWFya2VkIHdpdGggYSB3aGl0ZSBkb3QuIEZvciBleGFtcGxlLCBpZiB5b3UgZ3Vlc3MgKDEsNikgYW5kIHRoZSBvcHBvbmVudCBkb2VzIG5vdCBoYXZlIGFueSBzaGlwIGxvY2F0ZWQgYXQgKDEsNiksIHRoZSBcXFxuICAgIG9wcG9uZW50J3MgZ3JpZCB3b3VsZCBiZSBtYXJrZWQgd2l0aCBhIHdoaXRlIGRvdCBhdCAoMSw2KS48YnIvPjxici8+IFdoZW4gYWxsIG9mIHRoZSBzcXVhcmVzIHRoYXQgb25lIG9mIHlvdXIgc2hpcHMgb2NjdXBpZXMgYXJlIGhpdFxcXG4gICAgdGhlIHNoaXAgd2lsbCBiZSBzdW5rLCBhbmQgdGhpcyB3aWxsIGJlIGluZGljYXRlZCB0byBib3RoIHBsYXllcnMuIEFzIHNvb24gYXMgYWxsIG9mIG9uZSBwbGF5ZXIncyBzaGlwcyBoYXZlIGJlZW4gc3VuaywgdGhlIFxcXG4gICAgZ2FtZSBlbmRzLiA8YnIvPjxici8+VG8gc3RhcnQgYSBuZXcgZ2FtZSwgb3IgdG8gcmVzZXQgYXQgYW55IHBvaW50IHdpdGhpbiBhIGdhbWUsIGNsaWNrIFxcXCJyZXNldFxcXCIuXCI7XG5cbiAgICBpbnN0cnVjdGlvbnNDb250ZW50LmFwcGVuZENoaWxkKGNsb3NlSW5zdHJ1Y3Rpb25zQnRuKTtcbiAgICBpbnN0cnVjdGlvbnNDb250ZW50LmFwcGVuZENoaWxkKGluc3RydWN0aW9uc1RpdGxlKTtcbiAgICBpbnN0cnVjdGlvbnNDb250ZW50LmFwcGVuZENoaWxkKGdhbWVPYmplY3RpdmUpO1xuICAgIGluc3RydWN0aW9uc0NvbnRlbnQuYXBwZW5kQ2hpbGQoZ2FtZU9iamVjdGl2ZURlc2NyaXB0aW9uKTtcbiAgICBpbnN0cnVjdGlvbnNDb250ZW50LmFwcGVuZENoaWxkKHN0YXJ0aW5nTmV3R2FtZSk7XG4gICAgaW5zdHJ1Y3Rpb25zQ29udGVudC5hcHBlbmRDaGlsZChzdGFydGluZ05ld0Rlc2NyaXB0aW9uKTtcbiAgICBpbnN0cnVjdGlvbnNDb250ZW50LmFwcGVuZENoaWxkKHBsYXlpbmdHYW1lKTtcbiAgICBpbnN0cnVjdGlvbnNDb250ZW50LmFwcGVuZENoaWxkKHBsYXlpbmdHYW1lRGVzY3JpcHRpb24pO1xuXG5cblxuICAgIGluc3RydWN0aW9ucy5hcHBlbmRDaGlsZCggaW5zdHJ1Y3Rpb25zQ29udGVudCk7XG4gICAgZG9jdW1lbnRCb2R5LmFwcGVuZENoaWxkKGluc3RydWN0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdhbWVPdmVyU2NyZWVuKCkge1xuICAgIGxldCBkb2N1bWVudEJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcblxuICAgIC8vbGV0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIC8vY29udGVudC5pZCA9IFwiY29udGVudFwiO1xuXG4gICAgLy9pbnN0cnVjdGlvbiBzY3JlZW5cbiAgICBsZXQgZ2FtZU92ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGdhbWVPdmVyLmlkID0gXCJnYW1lT3ZlclwiO1xuICAgIGdhbWVPdmVyLmNsYXNzTmFtZSA9IFwibW9kYWxcIjtcbiAgICBnYW1lT3Zlci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBsZXQgZ2FtZU92ZXJDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBnYW1lT3ZlckNvbnRlbnQuY2xhc3NOYW1lID0gXCJtb2RhbC1jb250ZW50XCI7XG4gICAgZ2FtZU92ZXJDb250ZW50LmlubmVySFRNTCA9IFwiR2FtZSBPdmVyXCI7XG5cbiAgICBsZXQgZ2FtZU92ZXJCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBnYW1lT3ZlckJ0bi5jbGFzc05hbWUgPSBcImNsb3NlXCI7XG4gICAgZ2FtZU92ZXJCdG4uaWQgPSBcImNsb3NlLWdhbWUtYnV0dG9uXCI7XG4gICAgZ2FtZU92ZXJCdG4uaW5uZXJIVE1MID0gXCImdGltZXM7XCI7XG5cbiAgICBnYW1lT3ZlckNvbnRlbnQuYXBwZW5kQ2hpbGQoZ2FtZU92ZXJCdG4pO1xuICAgIGdhbWVPdmVyLmFwcGVuZENoaWxkKCBnYW1lT3ZlckNvbnRlbnQpO1xuICAgIGRvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChnYW1lT3Zlcik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdhbWVCb2FyZCgpIHtcblxuICAgIGxldCBwbGF5ZXJCb2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcGxheWVyQm9hcmQuY2xhc3NOYW1lID0gXCJnYW1lLWJvYXJkXCI7XG4gICAgcGxheWVyQm9hcmQuaWQgPSBcInBsYXllci1ib2FyZFwiO1xuXG4gICAgbGV0IGdyaWQgPSBjcmVhdGVHcmlkKFwicGxheWVyXCIpO1xuXG4gICAgbGV0IGJvYXJkTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGJvYXJkTmFtZS5pbm5lckhUTUwgPSBcIlBsYXllclwiO1xuICAgIGJvYXJkTmFtZS5jbGFzc05hbWUgPSBcImJvYXJkLW5hbWVcIjtcblxuICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKGdyaWQpO1xuICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKGJvYXJkTmFtZSk7XG5cbiAgICByZXR1cm4gcGxheWVyQm9hcmQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVyQm9hcmQoKSB7XG4gICAgbGV0IGNvbXB1dGVyQm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbXB1dGVyQm9hcmQuY2xhc3NOYW1lID0gXCJnYW1lLWJvYXJkXCI7XG4gICAgY29tcHV0ZXJCb2FyZC5pZCA9IFwiY29tcHV0ZXItYm9hcmRcIjtcblxuICAgIGxldCBncmlkID0gY3JlYXRlR3JpZChcImNvbXB1dGVyXCIpO1xuXG4gICAgbGV0IGJvYXJkTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGJvYXJkTmFtZS5pbm5lckhUTUwgPSBcIkNvbXB1dGVyXCI7XG4gICAgYm9hcmROYW1lLmNsYXNzTmFtZSA9IFwiYm9hcmQtbmFtZVwiO1xuXG4gICAgY29tcHV0ZXJCb2FyZC5hcHBlbmRDaGlsZChncmlkKTtcbiAgICBjb21wdXRlckJvYXJkLmFwcGVuZENoaWxkKGJvYXJkTmFtZSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZXJCb2FyZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR3JpZChuYW1lKSB7XG4gICAgbGV0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGdyaWQuY2xhc3NOYW1lID0gXCJncmlkXCI7XG4gICAgLy9mb3IgdGVzdGluZyBwdXJwb3Nlc1xuICAgIC8vIGdyaWQuc3R5bGUud2lkdGggPSBcIjUyMnB4XCI7XG4gICAgLy8gZ3JpZC5zdHlsZS5oZWlnaHQgPSBcIjUxMXB4XCI7XG4gICAgLy9lbmRcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgICAgIGxldCB1bml0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgLy9mb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgICAvLyB1bml0LnN0eWxlLndpZHRoID0gXCI1MHB4XCI7XG4gICAgICAgICAgICAvLyB1bml0LnN0eWxlLmhlaWdodCA9IFwiNTBweFwiO1xuICAgICAgICAgICAgLy8gdW5pdC5zdHlsZS5ib3JkZXJTdHlsZSA9IFwic29saWRcIjtcbiAgICAgICAgICAgIC8vIHVuaXQuc3R5bGUuYm9yZGVyV2lkdGggPSBcIjFweFwiO1xuICAgICAgICAgICAgLy8gdW5pdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsdWVcIlxuXG4gICAgICAgICAgICAvL2VuZFxuICAgICAgICAgICAgdW5pdC5jbGFzc05hbWUgPSBcInVuaXRcIjtcbiAgICAgICAgICAgIHVuaXQuY2xhc3NMaXN0LmFkZChuYW1lKTtcbiAgICAgICAgICAgIHVuaXQuaWQgPSBqICsgXCJ8XCIgKyBpICsgXCJ8XCIgKyBuYW1lO1xuICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZCh1bml0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncmlkO1xufVxuXG5cbi8vZnVuY3Rpb24gc2hvdWxkIHJlY2lldmUgZ2FtZWJvYXJkIGFuZCBwbGF5ZXIgYW5kIGNyZWF0ZSBzb21ldGhpbmcgb3V0IG9mIHRoYXQsIFxuXG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuICAgIC8vcGxhY2UgdGhlIHNoaXBzXG5cbiAgICBwbGFjZVNoaXBzKGdldFBsYXllcigpLmdhbWVCb2FyZC5zaGlwcywgXCJwbGF5ZXJcIik7XG4gICAgcGxhY2VTaGlwcyhnZXRDb21wdXRlcigpLmdhbWVCb2FyZC5zaGlwcywgXCJjb21wdXRlclwiKTtcblxuICAgIC8vbWFyayByZWQgdGhlIGhpdCB1bml0c1xuICAgIG1hcmtIaXQoZ2V0UGxheWVyKCkuZ2FtZUJvYXJkLmhpdHMsIFwicGxheWVyXCIpO1xuICAgIG1hcmtNaXNzZXMoZ2V0UGxheWVyKCkuZ2FtZUJvYXJkLm1pc3NlcywgXCJwbGF5ZXJcIik7XG5cbiAgICBtYXJrSGl0KGdldENvbXB1dGVyKCkuZ2FtZUJvYXJkLmhpdHMsIFwiY29tcHV0ZXJcIik7XG4gICAgbWFya01pc3NlcyhnZXRDb21wdXRlcigpLmdhbWVCb2FyZC5taXNzZXMsIFwiY29tcHV0ZXJcIik7XG5cbn1cblxuZnVuY3Rpb24gdXBkYXRlU2hpcHMoKSB7XG4gICAgXG4gICAgbGV0IHNoaXBVbml0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2hpcFwiKTtcbiAgICBBcnJheS5mcm9tKHNoaXBVbml0cykuZm9yRWFjaCggdW5pdCA9PiB7XG4gICAgICAgIHVuaXQuY2xhc3NMaXN0LnJlbW92ZShcInNoaXBcIik7XG4gICAgICAgIHVuaXQuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuICAgICAgICAvL3VuaXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJibHVlXCI7XG4gICAgfSlcblxuICAgIHBsYWNlU2hpcHMoIGdldFBsYXllcigpLmdhbWVCb2FyZC5zaGlwcywgXCJwbGF5ZXJcIik7XG4gICAgcGxhY2VTaGlwcyggZ2V0Q29tcHV0ZXIoKS5nYW1lQm9hcmQuc2hpcHMsIFwiY29tcHV0ZXJcIik7XG5cbn1cblxuXG5cbmZ1bmN0aW9uIHBsYWNlU2hpcHMoc2hpcHMsIG5hbWUpIHtcbiAgICBzaGlwcy5mb3JFYWNoKHNoaXAgPT4gW1xuICAgICAgICBzaGlwLnBvc0FycmF5LmZvckVhY2gocG9zID0+IHtcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IHBvc1swXSArIFwifFwiICsgcG9zWzFdICsgXCJ8XCIgKyBuYW1lO1xuICAgICAgICAgICAgbGV0IHVuaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbik7XG4gICAgICAgICAgICB1bml0LmNsYXNzTGlzdC5hZGQoXCJzaGlwXCIpO1xuICAgICAgICAgICAgaWYgKHNoaXAuc2VsZWN0ZWQgKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vV2FudCB0byBjaGFuZ2UgY29sb3IgdG8gYmx1ZSBpZiBjb21wdXRlciBpcyBwbGF5aW5nXG4gICAgICAgICAgICAvL3VuaXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJibGFja1wiO1xuICAgICAgICB9KVxuICAgIF0pXG59XG5cbmZ1bmN0aW9uIG1hcmtIaXQoaGl0cywgbmFtZSkge1xuICAgIGhpdHMuZm9yRWFjaChoaXQgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiaGl0OiArIFwiICsgaGl0KTtcblxuICAgICAgICBsZXQgcG9zaXRpb24gPSBoaXRbMF0gKyBcInxcIiArIGhpdFsxXSArIFwifFwiICsgbmFtZTtcbiAgICAgICAgbGV0IHVuaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbik7XG4gICAgICAgIHVuaXQuY2xhc3NMaXN0LmFkZChcImhpdFwiKTtcbiAgICAgICAgd2hpbGUodW5pdC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICB1bml0LnJlbW92ZUNoaWxkKCB1bml0LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaWduID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIHNpZ24uaW5uZXJIVE1MID0gXCImIzEwMDA1O1wiO1xuXG4gICAgICAgIHVuaXQuYXBwZW5kQ2hpbGQoc2lnbik7XG4gICAgICAgIC8vbGV0IGZpcmUgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgLy9maXJlLnNyYyA9IGZsYW1lO1xuICAgICAgICAvL3VuaXQuYXBwZW5kQ2hpbGQoZmlyZSk7XG4gICAgICAgIC8vdW5pdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgIH0pXG59XG5mdW5jdGlvbiBtYXJrTWlzc2VzKG1pc3NlcywgbmFtZSkge1xuICAgIG1pc3Nlcy5mb3JFYWNoKG1pc3MgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwibWlzczogKyBcIiArIG1pc3MpO1xuICAgICAgICBsZXQgcG9zaXRpb24gPSBtaXNzWzBdICsgXCJ8XCIgKyBtaXNzWzFdICsgXCJ8XCIgKyBuYW1lO1xuICAgICAgICBsZXQgdW5pdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvc2l0aW9uKTtcbiAgICAgICAgdW5pdC5jbGFzc0xpc3QuYWRkKFwibWlzc1wiKTtcbiAgICAgICAgd2hpbGUodW5pdC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICB1bml0LnJlbW92ZUNoaWxkKCB1bml0LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzaWduID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIC8vc2lnbi5pbm5lckhUTUwgPSBcIiYjMTgzO1wiO1xuXG4gICAgICAgIHVuaXQuYXBwZW5kQ2hpbGQoc2lnbik7XG4gICAgICAgIC8vdW5pdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZXlcIjtcbiAgICB9KVxufVxuXG4vL0VWRU5UIEhBTkRMRVJTXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhbmRsZXJzKCkge1xuXG4gICAgbGV0IHN0YXJ0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydC1idXR0b25cIik7XG4gICAgc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT4ge1xuICAgICAgICAvL211bHRpcGxlIGZ1bmN0aW9uc1xuICAgICAgICBpZiAoIHN0YXJ0QnRuLmlubmVySFRNTCA9PSBcIlN0YXJ0XCIpIHtcbiAgICAgICAgICAgIHN0YXJ0KCk7XG4gICAgICAgICAgICBzdGFydEJ0bi5pbm5lckhUTUwgPSBcIlJlc2V0XCI7XG5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggc3RhcnRCdG4uaW5uZXJIVE1MID09IFwiUmVzZXRcIikge1xuICAgICAgICAgICAgc3RhcnRCdG4uaW5uZXJIVE1MID0gXCJTdGFydFwiO1xuICAgICAgICAgICAgbGV0IGRvY3VtZW50Qm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICAgICAgICAgICAgd2hpbGUoZG9jdW1lbnRCb2R5LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudEJvZHkucmVtb3ZlQ2hpbGQoZG9jdW1lbnRCb2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgICAgIGxldCBpbnN0cnVjdGlvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluc3RydWN0aW9uc1wiKTtcbiAgICAgICAgICAgIGluc3RydWN0aW9ucy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBncmlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21wdXRlci1ib2FyZFwiKTtcbiAgICBncmlkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBpZiAoICFnZXRHYW1lRW5kZWQoKSAmJiBnZXRHYW1lU3RhcnRlZCgpICYmIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInVuaXRcIikgJiYgZ2V0VHVybigpID09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgIGF0dGFjayhlLnRhcmdldC5pZCk7XG4gICAgICAgICAgICAvLyB1cGRhdGUoKTtcbiAgICAgICAgICAgIC8vIGNoZWNrV2lubmVyKCk7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgbGV0IHBsYXllckdyaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllci1ib2FyZFwiKTtcbiAgICBwbGF5ZXJHcmlkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBpZiAoIWdldEdhbWVFbmRlZCgpICYmICFnZXRHYW1lU3RhcnRlZCgpICYmIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInNoaXBcIikpIHtcbiAgICAgICAgICAgIHNoaXBDbGlja2VkKGUpO1xuICAgICAgICB9ICAgICAgXG4gICAgfSlcblxuICAgIC8vIHBsYXllckdyaWQuYWRkRXZlbnRMaXN0ZW5lcihcImhvdmVyXCIsIChlKSA9PiB7XG4gICAgLy8gICAgIGlmICggIWdldEdhbWVTdGFydGVkKCkgJiYgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hpcFwiKSYmZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicGxheWVyXCIpKXtcbiAgICAvLyAgICAgICAgIGxldCBwb3NpdGlvbiA9IGUudGFyZ2V0LmlkLnNwbGl0KFwifFwiKTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH0gKVxuXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5zaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgICAgICAgICAgc2hpcC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdXBkYXRlU2hpcHMoKTtcbiAgICAgICAgfSlcblxuICAgIH0pXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mKHNlbGVjdGVkU2hpcCkgIT0gXCJ1bmRlZmluZWRcIiAmJiAhZ2V0R2FtZVN0YXJ0ZWQoKSkge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwiZG93blwiKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwidXBcIik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwibGVmdFwiKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwicmlnaHRcIik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgICAgICAgICAgICBnZXRQbGF5ZXIoKS5nYW1lQm9hcmQucm90YXRlKCBzZWxlY3RlZFNoaXApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVTaGlwcygpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCB0cnVlKTtcblxuXG5cblxuXG4gICAgICBpbnN0cnVjdGlvbkhhbmRsZXJzKCk7XG5cbn1cblxuZnVuY3Rpb24gaW5zdHJ1Y3Rpb25IYW5kbGVycygpIHtcbiAgICBsZXQgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluc3RydWN0aW9uc1wiKTtcbiAgICBsZXQgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsb3NlLWluc3RydWN0aW9ucy1idXR0b25cIik7XG4gICAgbGV0IG9wZW5CdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlbHAtYnV0dG9uXCIpO1xuXG4gICAgb3BlbkJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgfVxuICAgIGNsb3NlQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgd2luZG93Lm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PSBtb2RhbCkge1xuICAgICAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIGdhbWVPdmVySGFuZGxlcigpIHtcbiAgICBsZXQgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVPdmVyXCIpO1xuICAgIGxldCBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xvc2UtZ2FtZS1idXR0b25cIik7XG5cbiAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgY2xvc2VCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cbiAgICB3aW5kb3cub25jbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09IG1vZGFsKSB7XG4gICAgICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG5mdW5jdGlvbiBhdHRhY2sodW5pdElkKSB7XG4gICAgbGV0IHBvc2l0aW9uID0gdW5pdElkLnNwbGl0KFwifFwiKTtcbiAgICBjb25zb2xlLmxvZyhcImF0dGFjayBjbGlja2VkIVwiKVxuICAgIGxldCBwb3MgPSBbcGFyc2VJbnQocG9zaXRpb25bMF0pLCBwYXJzZUludChwb3NpdGlvblsxXSldO1xuICAgIGlmIChwb3NpdGlvblsyXSA9PSBcImNvbXB1dGVyXCIgJiYgIWlzQXJyYXlJbkFycmF5KCBnZXRQbGF5ZXIoKS50cmllcywgcG9zICkgKSB7XG4gICAgICAgIGdldFBsYXllcigpLmF0dGFja0VuZW15KHBvcyk7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICBjaGVja1dpbm5lcigpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCBwbGF5ZXIuZW5lbXlHYW1lYm9hcmQubWlzc2VzKVxuICAgIH1cblxuICAgIC8vIHVwZGF0ZSgpO1xuICAgIC8vIGNoZWNrV2lubmVyKCk7XG5cbn1cblxuZnVuY3Rpb24gc2hpcENsaWNrZWQoZSkge1xuICAgIGxldCBwb3NpdGlvbiA9IGUudGFyZ2V0LmlkLnNwbGl0KFwifFwiKTtcbiAgICAvL2xldCBzZWxlY3RlZFNoaXA7XG4gICAgaWYgKHBvc2l0aW9uWzJdID09IFwicGxheWVyXCIgKSB7XG5cbiAgICAgICAgbGV0IHNlbGVjdGVkUG9zID0gW3BhcnNlSW50KHBvc2l0aW9uWzBdKSwgcGFyc2VJbnQocG9zaXRpb25bMV0pXTtcbiAgICAgICAgZ2V0UGxheWVyKCkuZ2FtZUJvYXJkLnNoaXBzLmZvckVhY2goc2hpcCA9PiB7XG4gICAgICAgICAgICBzaGlwLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBzaGlwLnBvc0FycmF5LmZvckVhY2gocG9zID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoc2VsZWN0ZWRQb3MpID09IEpTT04uc3RyaW5naWZ5KHBvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTaGlwID0gc2hpcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIHNlbGVjdGVkU2hpcC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHVwZGF0ZVNoaXBzKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJzZWxlY3RlZFwiICsgc2VsZWN0ZWRTaGlwKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gZXJyb3JIaWdobGlnaHQoIGhpZ2hsaWdodFNoaXApIHtcbiAgICBsZXQgaGlnaGxpZ2h0QXJyYXkgPSBbXTtcbiAgICBoaWdobGlnaHRTaGlwLnBvc0FycmF5LmZvckVhY2goIHBvcyA9PiB7XG4gICAgICAgIGxldCBzZWxlY3RJZCA9IHBvc1swXSArIFwifFwiK3Bvc1sxXStcInxcIitcInBsYXllclwiO1xuICAgICAgICBsZXQgdW5pdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdElkKTtcbiAgICAgICAgaGlnaGxpZ2h0QXJyYXkucHVzaCh1bml0KTtcbiAgICB9KVxuICAgIGhpZ2hsaWdodEFycmF5LmZvckVhY2goIHBvcyA9PiB7XG4gICAgICAgIHBvcy5jbGFzc0xpc3QuYWRkKFwiaGlnaGxpZ2h0ZWRcIik7XG4gICAgfSlcbiAgICBoaWdobGlnaHRBcnJheS5mb3JFYWNoKCBwb3MgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgICAgICAgICBwb3MuY2xhc3NMaXN0LnJlbW92ZShcImhpZ2hsaWdodGVkXCIpO1xuICAgICAgICB9LCAxMDApXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gc2V0U2Vjb25kYXJ5KHRleHQpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlY29uZGFyeVwiKS5pbm5lckhUTUwgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBpc0FycmF5SW5BcnJheShhcnIsIGl0ZW0pe1xuICAgIHZhciBpdGVtX2FzX3N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0pO1xuICBcbiAgICB2YXIgY29udGFpbnMgPSBhcnIuc29tZShmdW5jdGlvbihlbGUpe1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVsZSkgPT09IGl0ZW1fYXNfc3RyaW5nO1xuICAgIH0pO1xuICAgIHJldHVybiBjb250YWlucztcbn1cblxuXG5leHBvcnQgeyBjcmVhdGVNYWluLCB1cGRhdGUsIGdhbWVPdmVyU2NyZWVuLCBnYW1lT3ZlckhhbmRsZXIsIGVycm9ySGlnaGxpZ2h0LCBzZXRTZWNvbmRhcnkgfTsiLCJpbXBvcnQgeyBjcmVhdGVTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xuaW1wb3J0IHtlcnJvckhpZ2hsaWdodH0gZnJvbSBcIi4vRE9NLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUdhbWVCb2FyZCgpIHtcblxuICAgIGZ1bmN0aW9uIGlzQXJyYXlJbkFycmF5KGFyciwgaXRlbSl7XG4gICAgICAgIHZhciBpdGVtX2FzX3N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0pO1xuICAgICAgXG4gICAgICAgIHZhciBjb250YWlucyA9IGFyci5zb21lKGZ1bmN0aW9uKGVsZSl7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVsZSkgPT09IGl0ZW1fYXNfc3RyaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zO1xuICAgIH1cblxuICAgIHJldHVybiAge1xuICAgICAgICBzaGlwcyA6IFtdLFxuICAgICAgICBoaXRzIDogW10sXG4gICAgICAgIG1pc3NlcyA6IFtdLFxuICAgICAgICBwbGFjZVNoaXAoIGxlbmd0aCwgc3RhcnRQb3MsIG9yaWVudGF0aW9uICkge1xuICAgICAgICAgICAgbGV0IGJsb2NraW5nID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgc2hpcCA9IGNyZWF0ZVNoaXAoIGxlbmd0aCwgc3RhcnRQb3MsIG9yaWVudGF0aW9uICk7XG4gICAgICAgICAgICB0aGlzLnNoaXBzLmZvckVhY2goIG90aGVyU2hpcCA9PiB7XG4gICAgICAgICAgICAgICAgb3RoZXJTaGlwLnBvc0FycmF5LmZvckVhY2goIHBvcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggaXNBcnJheUluQXJyYXkoc2hpcC5wb3NBcnJheSwgcG9zKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAoIWJsb2NraW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGlwcy5wdXNoKCBzaGlwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuICAgICAgICByZWNlaXZlQXR0YWNrKCBwb3NpdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgaXNIaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2hpcHMuZm9yRWFjaCggc2hpcCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNoaXAuaGl0KCBwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXRzLnB1c2goIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaXNIaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICggIWlzSGl0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5taXNzZXMucHVzaChwb3NpdGlvbik7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9wb3NpdGlvbiBoYXMgbm93IGJlZW4gaGl0XG4gICAgICAgIH0sIFxuICAgICAgICBhbGxTdW5rKCkge1xuICAgICAgICAgICAgbGV0IHN1bmsgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zaGlwcy5mb3JFYWNoKCBzaGlwID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoICFzaGlwLmlzU3VuaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bmsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdW5rO1xuICAgICAgICB9LFxuICAgICAgICAvL0JJRyBQUk9CTEVNOiBTVEFSVCBIRVJFLCBNT1ZFIERPRVNOVCBXT1JLISEhISEhISEhISEhISEhIVxuICAgICAgICBtb3ZlKCBzaGlwLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGxldCBjYW5Nb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBuZXdTaGlwO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIiB5IGNvb3JkOiBcIiArIHNoaXAucG9zQXJyYXlbMF1bMV0pO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyggc2hpcClcbiAgICAgICAgICAgIHN3aXRjaChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgICAgbmV3U2hpcCA9IGNyZWF0ZVNoaXAoIHNoaXAubGVuZ3RoLCBbc2hpcC5wb3NBcnJheVswXVswXSArMSwgc2hpcC5wb3NBcnJheVswXVsxXV0sIHNoaXAub3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCggc2hpcC5sZW5ndGgsIFtzaGlwLnBvc0FycmF5WzBdWzBdIC0xLCBzaGlwLnBvc0FycmF5WzBdWzFdIF0sIHNoaXAub3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZG93blwiOlxuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCggc2hpcC5sZW5ndGgsW3NoaXAucG9zQXJyYXlbMF1bMF0sIHNoaXAucG9zQXJyYXlbMF1bMV0gKyAxXSwgc2hpcC5vcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ1cFwiIDpcbiAgICAgICAgICAgICAgICAgICAgbmV3U2hpcCA9IGNyZWF0ZVNoaXAoIHNoaXAubGVuZ3RoLCBbc2hpcC5wb3NBcnJheVswXVswXSwgc2hpcC5wb3NBcnJheVswXVsxXSAtIDFdICwgc2hpcC5vcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coIG5ld1NoaXAucG9zQXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2cobmV3U2hpcCk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiIHkgY29vcmQ6IFwiICsgbmV3U2hpcC5wb3NBcnJheVswXVsxXSk7XG4gICAgICAgICAgICB0aGlzLnNoaXBzLmZvckVhY2goIG90aGVyU2hpcCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyU2hpcCAhPSBzaGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyU2hpcC5wb3NBcnJheS5mb3JFYWNoKHBvcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheUluQXJyYXkobmV3U2hpcC5wb3NBcnJheSwgcG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYW5vdGhlcnNoaXAgaW4gdGhlIHdheSEhIVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbk1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBuZXdTaGlwLnBvc0FycmF5LmZvckVhY2goIHBvcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggcG9zWzBdID4gOSB8fCBwb3NbMV0gPiA5IHx8IHBvc1swXSA8IDAgfHwgcG9zWzFdIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWFjaGVkIHRoZSBib3JkZXIhIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbk1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNhbiBtb3ZlOlwiICsgY2FuTW92ZSArIFwiIGluIFwiICtkaXJlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKGNhbk1vdmUpIHtcbiAgICAgICAgICAgICAgICBzaGlwLm1vdmUoZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNoaXBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycm9ySGlnaGxpZ2h0KHNoaXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByb3RhdGUoIHNoaXAgKSB7XG4gICAgICAgICAgICBsZXQgY2FuUm90YXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBuZXdTaGlwO1xuICAgICAgICAgICAgaWYgKCBzaGlwLm9yaWVudGF0aW9uID09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICAgICAgLy93YW50IHRvIHJvdGF0ZSB0byB2ZXJ0aWNhbFxuICAgICAgICAgICAgICAgIG5ld1NoaXAgPSBjcmVhdGVTaGlwKCBzaGlwLmxlbmd0aCwgc2hpcC5wb3NBcnJheVswXSwgXCJ2ZXJ0aWNhbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1NoaXAgPSBjcmVhdGVTaGlwKCBzaGlwLmxlbmd0aCwgc2hpcC5wb3NBcnJheVswXSwgXCJob3Jpem9udGFsXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNoaXBzLmZvckVhY2goIG90aGVyU2hpcCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyU2hpcCAhPSBzaGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyU2hpcC5wb3NBcnJheS5mb3JFYWNoKHBvcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheUluQXJyYXkobmV3U2hpcC5wb3NBcnJheSwgcG9zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYW5vdGhlcnNoaXAgaW4gdGhlIHdheSEhIVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhblJvdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5ld1NoaXAucG9zQXJyYXkuZm9yRWFjaCggcG9zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwb3NbMF0gPiA5IHx8IHBvc1sxXSA+IDkgfHwgcG9zWzBdIDwgMCB8fCBwb3NbMV0gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlYWNoZWQgdGhlIGJvcmRlciEhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuUm90YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgY29uc29sZS5sb2coIFwiY2FuIHJvdGF0ZTogXCIgKyBjYW5Sb3RhdGUgKTtcbiAgICAgICAgICAgIGlmIChjYW5Sb3RhdGUpIHtcbiAgICAgICAgICAgICAgICBzaGlwLnJvdGF0ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2hpcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3JIaWdobGlnaHQoc2hpcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7Y3JlYXRlR2FtZUJvYXJkfTsiLCJcbmZ1bmN0aW9uIGNyZWF0ZVBsYXllcihnYW1lQm9hcmQgLCBlbmVteUdhbWVib2FyZCwgaXNDb21wdXRlciApIHtcbiAgICBcbiAgICBcbiAgICBmdW5jdGlvbiBpc0FycmF5SW5BcnJheShhcnIsIGl0ZW0pe1xuICAgICAgICB2YXIgaXRlbV9hc19zdHJpbmcgPSBKU09OLnN0cmluZ2lmeShpdGVtKTtcbiAgICAgIFxuICAgICAgICB2YXIgY29udGFpbnMgPSBhcnIuc29tZShmdW5jdGlvbihlbGUpe1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlbGUpID09PSBpdGVtX2FzX3N0cmluZztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250YWlucztcbiAgICB9XG5cbiAgICBpZiAoIGlzQ29tcHV0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdhbWVCb2FyZDpnYW1lQm9hcmQsXG4gICAgICAgICAgICBlbmVteUdhbWVib2FyZDogZW5lbXlHYW1lYm9hcmQsXG4gICAgICAgICAgICB0cmllczogW10sXG4gICAgICAgICAgICAvL21ha2Ugc3VyZSB0aGF0IGNvbXB1dGVyIGNhbm5vdCBhdHRhY2sgcG9zaXRpb25zIHRoYXQgYXJlIGluIG1pc3NlcyBvciBoaXRzISEhISEhIVxuICAgICAgICAgICAgYXR0YWNrRW5lbXkoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJhbmRvbVBvc2l0aW9uID0gW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoIGlzQXJyYXlJbkFycmF5KCB0aGlzLnRyaWVzLCByYW5kb21Qb3NpdGlvbikpe1xuICAgICAgICAgICAgICAgICAgICByYW5kb21Qb3NpdGlvbiA9IFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCksIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudHJpZXMucHVzaCggcmFuZG9tUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGVuZW15R2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soIHJhbmRvbVBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gIHtcbiAgICAgICAgZ2FtZUJvYXJkOmdhbWVCb2FyZCxcbiAgICAgICAgZW5lbXlHYW1lYm9hcmQ6ZW5lbXlHYW1lYm9hcmQsXG4gICAgICAgIHRyaWVzOltdLFxuICAgICAgICBhdHRhY2tFbmVteSggIHBvc2l0aW9uICkge1xuICAgICAgICAgICAgaWYgKCAhaXNBcnJheUluQXJyYXkoIHRoaXMudHJpZXMsIHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGVuZW15R2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWVzLnB1c2goIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5leHBvcnQge2NyZWF0ZVBsYXllcn07IiwiaW1wb3J0IHsgY3JlYXRlR2FtZUJvYXJkIH0gZnJvbSBcIi4vR2FtZWJvYXJkLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVQbGF5ZXIgfSBmcm9tIFwiLi9QbGF5ZXIuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVNoaXAgfSBmcm9tIFwiLi9TaGlwLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVNYWluIH0gZnJvbSBcIi4vRE9NXCI7XG5pbXBvcnQgeyB1cGRhdGUsIGdhbWVPdmVyU2NyZWVuLCBnYW1lT3ZlckhhbmRsZXIgfSBmcm9tIFwiLi9ET01cIjtcblxubGV0IHR1cm4gPSBcInBsYXllclwiO1xubGV0IGdhbWVTdGFydGVkID0gZmFsc2U7XG5sZXQgZ2FtZUVuZGVkID0gZmFsc2U7XG5cbmxldCBwbGF5ZXJCb2FyZDtcbmxldCBjb21wdXRlckJvYXJkO1xuXG5sZXQgcGxheWVyO1xubGV0IGNvbXB1dGVyO1xuXG5mdW5jdGlvbiBzdGFydEdhbWUoKSB7XG4gICAgcGxheWVyQm9hcmQgPSBjcmVhdGVHYW1lQm9hcmQoKTtcbiAgICBjb21wdXRlckJvYXJkID0gY3JlYXRlR2FtZUJvYXJkKCk7XG4gICAgcGxhY2VQbGF5ZXJTaGlwcygpO1xuICAgIHBsYWNlQ29tcFNoaXBzKCk7XG4gICAgcGxheWVyID0gY3JlYXRlUGxheWVyKHBsYXllckJvYXJkLCBjb21wdXRlckJvYXJkLCBmYWxzZSk7XG4gICAgY29tcHV0ZXIgPSBjcmVhdGVQbGF5ZXIoY29tcHV0ZXJCb2FyZCwgcGxheWVyQm9hcmQsIHRydWUpO1xuXG4gICAgcGxheWVyLmF0dGFja0VuZW15KFswLCAxXSk7XG4gICAgcGxheWVyLmF0dGFja0VuZW15KFs1LCA1XSk7XG5cbiAgICBjb21wdXRlci5hdHRhY2tFbmVteSgpO1xuICAgIGNvbXB1dGVyLmF0dGFja0VuZW15KCk7XG5cbiAgICBjcmVhdGVNYWluKHBsYXllciwgY29tcHV0ZXIsIHR1cm4pO1xuXG5cbn1cblxuZnVuY3Rpb24gcGxhY2VQbGF5ZXJTaGlwcygpIHtcbiAgICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoIDUsIFswLDBdLCBcInZlcnRpY2FsXCIpO1xuICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcCggNCwgWzEsMF0sIFwidmVydGljYWxcIik7XG4gICAgcGxheWVyQm9hcmQucGxhY2VTaGlwKCAzLCBbMiwwXSwgXCJ2ZXJ0aWNhbFwiKTtcbiAgICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoIDMsIFszLDBdLCBcInZlcnRpY2FsXCIpO1xuICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcCggMiwgWzQsMF0sIFwidmVydGljYWxcIik7XG5cbn1cblxuZnVuY3Rpb24gcGxhY2VDb21wU2hpcHMoKXtcblxuICAgIC8vd2hpbGUoIGNvbXB1dGVyQm9hcmQuc2hpcHMubGVuZ3RoICE9IDEpIHtcbiAgICBjb21wdXRlckJvYXJkLnBsYWNlU2hpcCg1LCBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNSksIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpXSwgXG4gICAgICAgIE1hdGgucmFuZG9tKCkgPiAuNSA/IFwiaG9yaXpvbnRhbFwiIDpcInZlcnRpY2FsXCIpO1xuICAgIC8vfVxuICAgIHdoaWxlKCBjb21wdXRlckJvYXJkLnNoaXBzLmxlbmd0aCAhPSAyKSB7XG5cbiAgICBjb21wdXRlckJvYXJkLnBsYWNlU2hpcCg0LCBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNiksIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpXSwgXG4gICAgICAgIE1hdGgucmFuZG9tKCkgPiAuNSA/IFwiaG9yaXpvbnRhbFwiIDpcInZlcnRpY2FsXCIpO1xuICAgIH1cbiAgICB3aGlsZSggY29tcHV0ZXJCb2FyZC5zaGlwcy5sZW5ndGggIT0gMykge1xuXG4gICAgY29tcHV0ZXJCb2FyZC5wbGFjZVNoaXAoMywgW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDcpLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA3KV0sIFxuICAgICAgICBNYXRoLnJhbmRvbSgpID4gLjUgPyBcImhvcml6b250YWxcIiA6XCJ2ZXJ0aWNhbFwiKTtcbiAgICB9XG4gICAgd2hpbGUoIGNvbXB1dGVyQm9hcmQuc2hpcHMubGVuZ3RoICE9IDQpIHtcblxuICAgIGNvbXB1dGVyQm9hcmQucGxhY2VTaGlwKDMsIFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA3KSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNyldLCBcbiAgICAgICAgTWF0aC5yYW5kb20oKSA+IC41ID8gXCJob3Jpem9udGFsXCIgOlwidmVydGljYWxcIik7XG4gICAgfVxuICAgIHdoaWxlKCBjb21wdXRlckJvYXJkLnNoaXBzLmxlbmd0aCAhPSA1KSB7XG5cbiAgICBjb21wdXRlckJvYXJkLnBsYWNlU2hpcCgyLCBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOCksIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDgpXSwgXG4gICAgICAgIE1hdGgucmFuZG9tKCkgPiAuNSA/IFwiaG9yaXpvbnRhbFwiIDpcInZlcnRpY2FsXCIpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tXaW5uZXIoKSB7XG5cbiAgICBpZiAoY29tcHV0ZXJCb2FyZC5hbGxTdW5rKCkgfHwgcGxheWVyQm9hcmQuYWxsU3VuaygpKSB7XG4gICAgICAgIHR1cm4gPSBcImNvbXB1dGVyXCI7XG4gICAgICAgIC8vZW5kIGdhbWVcbiAgICAgICAgZW5kR2FtZSgpO1xuICAgICAgICAvL3BvcCB1cCAgZ2FtZSBlbmRlZCBzY3JlZW47XG5cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHR1cm4gPSBcImNvbXB1dGVyXCI7XG4gICAgICAgIGF3YWl0IHNsZWVwKDApO1xuICAgICAgICBjb21wdXRlci5hdHRhY2tFbmVteSgpO1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgdHVybiA9IFwicGxheWVyXCI7XG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGdhbWVTdGFydGVkID0gdHJ1ZTtcbiAgICBjb25zb2xlLmxvZyhcIkdhbWUgc3RhcnRlZCEhISFcIilcbn1cblxuZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgZ2FtZVN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBnYW1lRW5kZWQgPSBmYWxzZTtcbiAgICB0dXJuID0gXCJwbGF5ZXJcIjtcbiAgICBzdGFydEdhbWUoKTtcbn1cblxuZnVuY3Rpb24gZW5kR2FtZSgpIHtcbiAgICBnYW1lRW5kZWQgPSB0cnVlO1xuICAgIGNvbnNvbGUubG9nKFwiR2FtZSBFbmRlZFwiKTtcbiAgICBnYW1lT3ZlckhhbmRsZXIoKTtcbn1cblxuZnVuY3Rpb24gZ2V0VHVybigpIHtcbiAgICByZXR1cm4gdHVybjtcbn1cblxuZnVuY3Rpb24gZ2V0UGxheWVyKCkge1xuICAgIHJldHVybiBwbGF5ZXI7XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVyKCkge1xuICAgIHJldHVybiBjb21wdXRlcjtcbn1cblxuZnVuY3Rpb24gZ2V0R2FtZVN0YXJ0ZWQoKSB7XG4gICAgcmV0dXJuIGdhbWVTdGFydGVkO1xufVxuXG5mdW5jdGlvbiBnZXRHYW1lRW5kZWQoKSB7XG4gICAgcmV0dXJuIGdhbWVFbmRlZDtcbn1cblxuZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5cbmV4cG9ydCB7IHN0YXJ0R2FtZSwgY2hlY2tXaW5uZXIsIGdldFR1cm4sIGdldFBsYXllciwgZ2V0Q29tcHV0ZXIsIGdldEdhbWVTdGFydGVkLCBzdGFydCwgZ2V0R2FtZUVuZGVkLCByZXNldCB9OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IGNyZWF0ZU1haW4gfSBmcm9tIFwiLi9ET01cIjtcbmltcG9ydCB7Y3JlYXRlR2FtZUJvYXJkfSBmcm9tIFwiLi9HYW1lYm9hcmRcIjtcbmltcG9ydCB7Y3JlYXRlUGxheWVyfSBmcm9tIFwiLi9QbGF5ZXJcIjtcbmltcG9ydCB7IHN0YXJ0R2FtZSB9IGZyb20gXCIuL0dhbWVcIjtcbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cblxuc3RhcnRHYW1lKCk7XG4vL3BvcCB1cCBpbnN0cnVjdGlvbiBzY3JlZW4sIG9uY2Ugb25seVxuXG4vL25lZWRzOlxuLy9pbnN0cnVjdGlvbiBzY3JlZW5cbi8vZW5kIHNjcmVlblxuLy9hbGxvdyB1c2VyIHRvIHJlc2V0LCBhbmQgcmVzdGFydCBnYW1lIGlmIGVuZGVkXG5cbi8vICBFUlJPUjogU0hJUFMgQ0FOTk9UIEJFIFBMQUNFRCBPTiBUT1AgT0YgRUFDSCBPVEhFUiAgXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfaSIsIl9pMiIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNyZWF0ZVNoaXAiLCJzdGFydFBvcyIsIm9yaWVudGF0aW9uIiwicG9zQXJyYXkiLCJzZWxlY3RlZCIsImhpdHMiLCJoaXQiLCJwb3NpdGlvbiIsImFyciIsIml0ZW1fYXNfc3RyaW5nIiwic29tZSIsImVsZSIsImNvbnNvbGUiLCJsb2ciLCJpc1N1bmsiLCJtb3ZlIiwiZGlyZWN0aW9uIiwieCIsInJvdGF0ZSIsInNlbGVjdGVkU2hpcCIsImNyZWF0ZUdyaWQiLCJuYW1lIiwiZ3JpZCIsImNsYXNzTmFtZSIsImoiLCJ1bml0IiwiY2xhc3NMaXN0IiwiYWRkIiwicGxhY2VTaGlwcyIsImdldFBsYXllciIsImdhbWVCb2FyZCIsInNoaXBzIiwiZ2V0Q29tcHV0ZXIiLCJtYXJrSGl0IiwibWFya01pc3NlcyIsIm1pc3NlcyIsInVwZGF0ZVNoaXBzIiwic2hpcFVuaXRzIiwicXVlcnlTZWxlY3RvckFsbCIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJzaGlwIiwicG9zIiwiZ2V0RWxlbWVudEJ5SWQiLCJzaWduIiwiaW5uZXJIVE1MIiwibWlzcyIsImVycm9ySGlnaGxpZ2h0IiwiaGlnaGxpZ2h0U2hpcCIsImhpZ2hsaWdodEFycmF5Iiwic2VsZWN0SWQiLCJzZXRUaW1lb3V0IiwiaXNBcnJheUluQXJyYXkiLCJwbGFjZVNoaXAiLCJibG9ja2luZyIsIm90aGVyU2hpcCIsInJlY2VpdmVBdHRhY2siLCJpc0hpdCIsImFsbFN1bmsiLCJzdW5rIiwibmV3U2hpcCIsImNhbk1vdmUiLCJjYW5Sb3RhdGUiLCJjcmVhdGVQbGF5ZXIiLCJlbmVteUdhbWVib2FyZCIsImlzQ29tcHV0ZXIiLCJ0cmllcyIsImF0dGFja0VuZW15IiwicmFuZG9tUG9zaXRpb24iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwbGF5ZXJCb2FyZCIsImNvbXB1dGVyQm9hcmQiLCJwbGF5ZXIiLCJjb21wdXRlciIsInR1cm4iLCJnYW1lU3RhcnRlZCIsImdhbWVFbmRlZCIsInN0YXJ0R2FtZSIsInBsYWNlQ29tcFNoaXBzIiwiZG9jdW1lbnRCb2R5IiwiaW5zdHJ1Y3Rpb25zIiwiaW5zdHJ1Y3Rpb25zQ29udGVudCIsImNsb3NlSW5zdHJ1Y3Rpb25zQnRuIiwiaW5zdHJ1Y3Rpb25zVGl0bGUiLCJnYW1lT2JqZWN0aXZlIiwiZ2FtZU9iamVjdGl2ZURlc2NyaXB0aW9uIiwic3RhcnRpbmdOZXdHYW1lIiwic3RhcnRpbmdOZXdEZXNjcmlwdGlvbiIsInBsYXlpbmdHYW1lIiwicGxheWluZ0dhbWVEZXNjcmlwdGlvbiIsImNyZWF0ZUluc3RydWN0aW9ucyIsImdhbWVPdmVyIiwiZGlzcGxheSIsImdhbWVPdmVyQ29udGVudCIsImdhbWVPdmVyQnRuIiwiZ2FtZU92ZXJTY3JlZW4iLCJoZWFkZXIiLCJzZWNvbmRhcnkiLCJzdGFydEJ0biIsIm1haW5Cb2R5IiwiYm9hcmROYW1lIiwiY3JlYXRlR2FtZUJvYXJkIiwiY3JlYXRlQ29tcHV0ZXJCb2FyZCIsImhlbHBCdG4iLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0R2FtZUVuZGVkIiwiZ2V0R2FtZVN0YXJ0ZWQiLCJjb250YWlucyIsInVuaXRJZCIsInNwbGl0IiwicGFyc2VJbnQiLCJjaGVja1dpbm5lciIsImF0dGFjayIsInNlbGVjdGVkUG9zIiwic3RvcFByb3BhZ2F0aW9uIiwic2hpcENsaWNrZWQiLCJldmVudCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsIm1vZGFsIiwiY2xvc2VCdXR0b24iLCJvbmNsaWNrIiwiaW5zdHJ1Y3Rpb25IYW5kbGVycyIsImNyZWF0ZUhhbmRsZXJzIiwiY3JlYXRlTWFpbiIsImFzeW5jIiwiZ2FtZU92ZXJIYW5kbGVyIiwiUHJvbWlzZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9