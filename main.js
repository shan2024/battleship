(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(537),a=r.n(n),o=r(645),i=r.n(o)()(a());i.push([e.id,"body {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:space-around;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,eAAe;AACnB",sourcesContent:["body {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:space-around;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);n&&i[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],l=n.base?c[0]+n.base:c[0],p=o[l]||0,d="".concat(l," ").concat(p);o[l]=p+1;var u=r(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var m=a(h,n);n.byIndex=s,t.splice(s,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,a){var o=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=r(o[i]);t[s].references--}for(var c=n(e,a),l=0;l<o.length;l++){var p=r(o[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={id:n,exports:{}};return e[n](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e,t,r){let n=[t];for(let a=1;a<e;a++)"horizontal"==r?n.push([t[0]+a,t[1]]):"vertical"==r&&n.push([t[0],t[1]+a]);return{selected:!1,startPos:t,posArray:n,hits:[],length:e,orientation:r,hit(e){return t=n,r=e,a=JSON.stringify(r),!!t.some((function(e){return JSON.stringify(e)===a}))&&(this.hits.push(e),!0);var t,r,a},isSunk(){return this.hits.length==this.length},move(e){switch(e){case"right":this.posArray=this.posArray.map((e=>[e[0]+1,e[1]]));break;case"left":this.posArray=this.posArray.map((e=>[e[0]-1,e[1]]));break;case"down":this.posArray=this.posArray.map((e=>[e[0],e[1]+1])),console.log(this.posArray);break;case"up":this.posArray=this.posArray.map((e=>[e[0],e[1]-1]))}}}}function t(){function t(e,t){var r=JSON.stringify(t);return e.some((function(e){return JSON.stringify(e)===r}))}return{ships:[],hits:[],misses:[],placeShip(r,n,a){let o=!1,i=e(r,n,a);this.ships.forEach((e=>{e.posArray.forEach((e=>{t(i.posArray,e)&&(o=!0)}))})),o||this.ships.push(i)},receiveAttack(e){let t=!1;this.ships.forEach((r=>{r.hit(e)&&(this.hits.push(e),t=!0)})),t||this.misses.push(e)},allSunk(){let e=!0;return this.ships.forEach((t=>{t.isSunk()||(e=!1)})),e},move(r,n){let a,o=!0;switch(console.log(" y coord: "+r.posArray[0][1]),n){case"right":a=e(r.length,r.posArray.map((e=>[e[0]+1,e[1]])),r.orientation);break;case"left":a=e(r.length,r.posArray.map((e=>[e[0]-1,e[1]])),r.orientation);break;case"down":a=e(r.length,r.posArray.map((e=>[e[0],e[1]+1])),r.orientation);break;case"up":a=e(r.length,r.posArray.map((e=>[e[0],e[1]-1])),r.orientation)}console.log(" y coord: "+a.posArray[0][1]),this.ships.forEach((e=>{e.posArray.forEach((e=>{t(a.posArray,e)&&(o=!1)})),a.posArray.forEach((e=>{(e[0]>9||e[1]>9||e[0]<0||e[1]<0)&&(o=!1)}))})),console.log("can move:"+o+" in "+n),o&&(r.move(n),console.log(this.ships))}}}function n(e,t,r){function n(e,t){var r=JSON.stringify(t);return e.some((function(e){return JSON.stringify(e)===r}))}return r?{gameBoard:e,enemyGameboard:t,tries:[],attackEnemy(){let e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];for(;n(this.tries,e);)e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];this.tries.push(e),t.receiveAttack(e)}}:{gameBoard:e,enemyGameboard:t,tries:[],attackEnemy(e){n(this.tries,e)||(t.receiveAttack(e),this.tries.push(e))}}}let a,o,i,s="player",c=t(),l=t();async function p(){l.allSunk()||c.allSunk()?s="computer":(s="computer",await(3e3,new Promise((e=>setTimeout(e,3e3)))),o.attackEnemy(),m(),s="player")}function d(){return a}function u(){return o}function h(e){let t=document.createElement("div");t.className="grid",t.style.width="522px",t.style.height="511px";for(let r=0;r<10;r++)for(let n=0;n<10;n++){let a=document.createElement("div");a.style.width="50px",a.style.height="50px",a.style.borderStyle="solid",a.style.borderWidth="1px",a.style.backgroundColor="blue",a.className="unit",a.id=n+"|"+r+"|"+e,t.appendChild(a)}return t}function m(){let e=d().gameBoard.ships,t=u().gameBoard.ships;f(e,"player"),f(t,"computer"),y(d().gameBoard.hits,"player"),g(d().gameBoard.misses,"player"),y(u().gameBoard.hits,"computer"),g(u().gameBoard.misses,"computer")}function f(e,t){e.forEach((e=>[e.posArray.forEach((e=>{let r=e[0]+"|"+e[1]+"|"+t,n=document.getElementById(r);n.classList.add("ship"),n.style.backgroundColor="black"}))]))}function y(e,t){e.forEach((e=>{let r=e[0]+"|"+e[1]+"|"+t;document.getElementById(r).style.backgroundColor="red"}))}function g(e,t){e.forEach((e=>{let r=e[0]+"|"+e[1]+"|"+t;document.getElementById(r).style.backgroundColor="grey"}))}var A=r(379),v=r.n(A),b=r(795),E=r.n(b),M=r(569),k=r.n(M),C=r(565),B=r.n(C),S=r(216),w=r.n(S),x=r(589),I=r.n(x),L=r(426),N={};N.styleTagTransform=I(),N.setAttributes=B(),N.insert=k().bind(null,"head"),N.domAPI=E(),N.insertStyleElement=w(),v()(L.Z,N),L.Z&&L.Z.locals&&L.Z.locals,c.placeShip(5,[0,0],"vertical"),c.placeShip(4,[1,0],"vertical"),c.placeShip(3,[2,0],"vertical"),c.placeShip(3,[3,0],"vertical"),c.placeShip(2,[4,0],"vertical"),function(){for(l.placeShip(5,[Math.floor(5*Math.random()),Math.floor(5*Math.random())],Math.random()>.5?"horizontal":"vertical");2!=l.ships.length;)l.placeShip(4,[Math.floor(6*Math.random()),Math.floor(6*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;3!=l.ships.length;)l.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;4!=l.ships.length;)l.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;5!=l.ships.length;)l.placeShip(2,[Math.floor(8*Math.random()),Math.floor(8*Math.random())],Math.random()>.5?"horizontal":"vertical")}(),a=n(c,l,!1),o=n(l,c,!0),a.attackEnemy([0,1]),a.attackEnemy([5,5]),o.attackEnemy(),o.attackEnemy(),function(){let e=document.querySelector("body"),t=document.createElement("header");t.innerHTML="Battleship",t.id="header";let r=document.createElement("h1");r.innerHTML="Place your Ships!",r.id="secondary";let n=document.createElement("button");n.innerHTML="Start Game",n.id="start-button";let a=document.createElement("div");a.id="main-body";let o=function(){let e=document.createElement("div");e.className="game-board",e.id="player-board";let t=h("player"),r=document.createElement("p");return r.innerHTML="Player board",r.className="board-name",e.appendChild(t),e.appendChild(r),e}(),c=function(){let e=document.createElement("div");e.className="game-board",e.id="computer-board";let t=h("computer"),r=document.createElement("p");return r.innerHTML="Computer board",r.className="board-name",e.appendChild(t),e.appendChild(r),e}();a.appendChild(o),a.appendChild(c),e.appendChild(t),e.appendChild(r),e.appendChild(n),e.appendChild(a),m(),document.getElementById("computer-board").addEventListener("click",(e=>{e.target.classList.contains("unit")&&"player"==s&&(function(e){let t=e.split("|");if(console.log("attack clicked!"),"computer"==t[2]){let e=[parseInt(t[0]),parseInt(t[1])];d().attackEnemy(e)}}(e.target.id),m(),p())})),document.getElementById("player-board").addEventListener("click",(e=>{e.target.classList.contains("ship")&&function(e){let t=e.target.id.split("|");if("player"==t[2]){let r=[parseInt(t[0]),parseInt(t[1])];d().gameBoard.ships.forEach((e=>{e.selected=!1,e.posArray.forEach((t=>{JSON.stringify(r)==JSON.stringify(t)&&(i=e)}))})),i.selected=!0,console.log("selected"+i),e.stopPropagation()}}(e)})),window.addEventListener("click",(e=>{d().gameBoard.ships.forEach((e=>{e.selected=!1}))})),window.addEventListener("keydown",(function(e){if(!e.defaultPrevented){if(void 0!==i)switch(e.key){case"ArrowDown":d().gameBoard.move(i,"down");break;case"ArrowUp":d().gameBoard.move(i,"up");break;case"ArrowLeft":d().gameBoard.move(i,"left");break;case"ArrowRight":d().gameBoard.move(i,"right");break;case" ":break;default:return}!function(){let e=document.querySelectorAll(".ship");Array.from(e).forEach((e=>{e.classList.remove("ship"),e.style.backgroundColor="blue"})),f(d().gameBoard.ships,"player"),f(u().gameBoard.ships,"computer")}(),e.preventDefault()}}),!0)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFDeEJZLFFBQVFDLElBQUksV0FBYTZCLEdBQ3pCeEYsRUFBRXVJLG1CQXZFRUMsQ0FBWXhJLE1BS3BCSixPQUFPb0ksaUJBQWlCLFNBQVVoSSxJQUM5QmlHLElBQVlwQixVQUFVZixNQUFNSyxTQUFRRCxJQUNoQ0EsRUFBS3BCLFVBQVcsUUFLeEJsRCxPQUFPb0ksaUJBQWlCLFdBQVcsU0FBVVMsR0FDekMsSUFBSUEsRUFBTUMsaUJBQVYsQ0FHQSxRQUE0QixJQUFsQixFQUNOLE9BQVFELEVBQU16RyxLQUNWLElBQUssWUFDRGlFLElBQVlwQixVQUFVdEIsS0FBTWlDLEVBQWMsUUFDNUMsTUFDRixJQUFLLFVBQ0RTLElBQVlwQixVQUFVdEIsS0FBTWlDLEVBQWMsTUFDNUMsTUFDRixJQUFLLFlBQ0RTLElBQVlwQixVQUFVdEIsS0FBTWlDLEVBQWMsUUFDNUMsTUFDRixJQUFLLGFBQ0RTLElBQVlwQixVQUFVdEIsS0FBTWlDLEVBQWMsU0FDNUMsTUFDRixJQUFLLElBQ0gsTUFDRixRQUNFLFFBM0ZsQixXQUVJLElBQUltRCxFQUFZakosU0FBU2tKLGlCQUFpQixTQUMxQ0MsTUFBTUMsS0FBS0gsR0FBV3hFLFNBQVN1QyxJQUMzQkEsRUFBS1UsVUFBVXJJLE9BQU8sUUFDdEIySCxFQUFLbkgsTUFBTXNILGdCQUFrQixVQUdqQ0csRUFBWWYsSUFBWXBCLFVBQVVmLE1BQU8sVUFDekNrRCxFQUFZZCxJQUFjckIsVUFBVWYsTUFBTyxZQXFGdkNpRixHQUNBTixFQUFNTyxxQkFDTCxHRDdNTEMsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9TaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvR2FtZWJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvUGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvR2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL0RPTS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICAgIGRpc3BsYXk6ZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuI21haW4tYm9keSB7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDtcXG59XFxuXFxuLmdhbWUtYm9hcmQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uZ3JpZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYiw0QkFBNEI7QUFDaEM7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLHVCQUF1QjtJQUN2QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZUFBZTtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXG4gICAgZGlzcGxheTpmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jbWFpbi1ib2R5IHtcXG4gICAgd2lkdGg6IDEwMHZ3O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kO1xcbn1cXG5cXG4uZ2FtZS1ib2FyZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5ncmlkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1tfaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBtb2R1bGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2kyXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImZ1bmN0aW9uIGNyZWF0ZVNoaXAoIGxlbmd0aCAsIHN0YXJ0UG9zLCBvcmllbnRhdGlvbiApIHtcblxuICAgIGxldCBwb3NBcnJheSA9IFsgc3RhcnRQb3MgXTtcbiAgICBmb3IgKCBsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICAgIHBvc0FycmF5LnB1c2goIFsgc3RhcnRQb3NbMF0rIGksIHN0YXJ0UG9zWzFdXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIG9yaWVudGF0aW9uID09IFwidmVydGljYWxcIikge1xuICAgICAgICAgICAgcG9zQXJyYXkucHVzaCggW3N0YXJ0UG9zWzBdLCBzdGFydFBvc1sxXSArIGldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXlJbkFycmF5KGFyciwgaXRlbSl7XG4gICAgICAgIHZhciBpdGVtX2FzX3N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0pO1xuICAgICAgXG4gICAgICAgIHZhciBjb250YWlucyA9IGFyci5zb21lKGZ1bmN0aW9uKGVsZSl7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVsZSkgPT09IGl0ZW1fYXNfc3RyaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zO1xuICAgICAgfVxuICAgICAgXG4gICAgXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgIHN0YXJ0UG9zOnN0YXJ0UG9zLFxuICAgICAgICBwb3NBcnJheSA6IHBvc0FycmF5LFxuICAgICAgICBoaXRzOiBbXSxcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgICAgLy9wb3NpdGlvbiBzaG91bGQgYmUgYW4gYXJyYXlcbiAgICAgICAgaGl0KCBwb3NpdGlvbikge1xuICAgICAgICAgICAgIGlmIChpc0FycmF5SW5BcnJheSggcG9zQXJyYXksIHBvc2l0aW9uICkgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaXRzLnB1c2goIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaXNTdW5rKCkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmhpdHMubGVuZ3RoID09IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb3ZlKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgc3dpdGNoKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc0FycmF5ID0gdGhpcy5wb3NBcnJheS5tYXAoIHggPT4gW3hbMF0gKyAxLCB4WzFdIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NBcnJheSA9IHRoaXMucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdIC0gMSwgeFsxXSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zQXJyYXkgPSB0aGlzLnBvc0FycmF5Lm1hcCggeCA9PiBbeFswXSAsIHhbMV0gKzEgXSApO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnBvc0FycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInVwXCIgOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc0FycmF5ID0gdGhpcy5wb3NBcnJheS5tYXAoIHggPT4gW3hbMF0gLCB4WzFdIC0xIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgIFxuXG4gICAgfVxufVxuXG5leHBvcnQge2NyZWF0ZVNoaXB9OyIsImltcG9ydCB7IGNyZWF0ZVNoaXAgfSBmcm9tIFwiLi9TaGlwXCI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUdhbWVCb2FyZCgpIHtcblxuICAgIGZ1bmN0aW9uIGlzQXJyYXlJbkFycmF5KGFyciwgaXRlbSl7XG4gICAgICAgIHZhciBpdGVtX2FzX3N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0pO1xuICAgICAgXG4gICAgICAgIHZhciBjb250YWlucyA9IGFyci5zb21lKGZ1bmN0aW9uKGVsZSl7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVsZSkgPT09IGl0ZW1fYXNfc3RyaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zO1xuICAgIH1cblxuICAgIHJldHVybiAge1xuICAgICAgICBzaGlwcyA6IFtdLFxuICAgICAgICBoaXRzIDogW10sXG4gICAgICAgIG1pc3NlcyA6IFtdLFxuICAgICAgICBwbGFjZVNoaXAoIGxlbmd0aCwgc3RhcnRQb3MsIG9yaWVudGF0aW9uICkge1xuICAgICAgICAgICAgbGV0IGJsb2NraW5nID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgc2hpcCA9IGNyZWF0ZVNoaXAoIGxlbmd0aCwgc3RhcnRQb3MsIG9yaWVudGF0aW9uICk7XG4gICAgICAgICAgICB0aGlzLnNoaXBzLmZvckVhY2goIG90aGVyU2hpcCA9PiB7XG4gICAgICAgICAgICAgICAgb3RoZXJTaGlwLnBvc0FycmF5LmZvckVhY2goIHBvcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggaXNBcnJheUluQXJyYXkoc2hpcC5wb3NBcnJheSwgcG9zKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAoIWJsb2NraW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGlwcy5wdXNoKCBzaGlwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuICAgICAgICByZWNlaXZlQXR0YWNrKCBwb3NpdGlvbikge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgaXNIaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2hpcHMuZm9yRWFjaCggc2hpcCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNoaXAuaGl0KCBwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXRzLnB1c2goIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaXNIaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICggIWlzSGl0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5taXNzZXMucHVzaChwb3NpdGlvbik7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9wb3NpdGlvbiBoYXMgbm93IGJlZW4gaGl0XG4gICAgICAgIH0sIFxuICAgICAgICBhbGxTdW5rKCkge1xuICAgICAgICAgICAgbGV0IHN1bmsgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zaGlwcy5mb3JFYWNoKCBzaGlwID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoICFzaGlwLmlzU3VuaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bmsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdW5rO1xuICAgICAgICB9LFxuICAgICAgICAvL0JJRyBQUk9CTEVNOiBTVEFSVCBIRVJFLCBNT1ZFIERPRVNOVCBXT1JLISEhISEhISEhISEhISEhIVxuICAgICAgICBtb3ZlKCBzaGlwLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGxldCBjYW5Nb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBuZXdTaGlwO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCIgeSBjb29yZDogXCIgKyBzaGlwLnBvc0FycmF5WzBdWzFdKTtcblxuICAgICAgICAgICAgc3dpdGNoKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCggc2hpcC5sZW5ndGgsIHNoaXAucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdICsgMSwgeFsxXSBdICksIHNoaXAub3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCggc2hpcC5sZW5ndGgsIHNoaXAucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdIC0gMSwgeFsxXSBdICksIHNoaXAub3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZG93blwiOlxuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCggc2hpcC5sZW5ndGgsIHNoaXAucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdICwgeFsxXSArIDEgXSApLCBzaGlwLm9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInVwXCIgOlxuICAgICAgICAgICAgICAgICAgICBuZXdTaGlwID0gY3JlYXRlU2hpcCggc2hpcC5sZW5ndGgsIHNoaXAucG9zQXJyYXkubWFwKCB4ID0+IFt4WzBdICwgeFsxXSAtIDEgXSApLCBzaGlwLm9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIiB5IGNvb3JkOiBcIiArIG5ld1NoaXAucG9zQXJyYXlbMF1bMV0pO1xuICAgICAgICAgICAgdGhpcy5zaGlwcy5mb3JFYWNoKCBvdGhlclNoaXAgPT4ge1xuICAgICAgICAgICAgICAgIG90aGVyU2hpcC5wb3NBcnJheS5mb3JFYWNoKCBwb3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGlzQXJyYXlJbkFycmF5KG5ld1NoaXAucG9zQXJyYXksIHBvcykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5Nb3ZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgbmV3U2hpcC5wb3NBcnJheS5mb3JFYWNoKCBwb3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHBvc1swXSA+IDkgfHwgcG9zWzFdID4gOSB8fCBwb3NbMF0gPCAwIHx8IHBvc1sxXSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbk1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNhbiBtb3ZlOlwiICsgY2FuTW92ZSArIFwiIGluIFwiICtkaXJlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKGNhbk1vdmUpIHtcbiAgICAgICAgICAgICAgICBzaGlwLm1vdmUoZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnNoaXBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHtjcmVhdGVHYW1lQm9hcmR9OyIsIlxuZnVuY3Rpb24gY3JlYXRlUGxheWVyKGdhbWVCb2FyZCAsIGVuZW15R2FtZWJvYXJkLCBpc0NvbXB1dGVyICkge1xuICAgIFxuICAgIFxuICAgIGZ1bmN0aW9uIGlzQXJyYXlJbkFycmF5KGFyciwgaXRlbSl7XG4gICAgICAgIHZhciBpdGVtX2FzX3N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0pO1xuICAgICAgXG4gICAgICAgIHZhciBjb250YWlucyA9IGFyci5zb21lKGZ1bmN0aW9uKGVsZSl7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVsZSkgPT09IGl0ZW1fYXNfc3RyaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zO1xuICAgIH1cblxuICAgIGlmICggaXNDb21wdXRlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2FtZUJvYXJkOmdhbWVCb2FyZCxcbiAgICAgICAgICAgIGVuZW15R2FtZWJvYXJkOiBlbmVteUdhbWVib2FyZCxcbiAgICAgICAgICAgIHRyaWVzOiBbXSxcbiAgICAgICAgICAgIC8vbWFrZSBzdXJlIHRoYXQgY29tcHV0ZXIgY2Fubm90IGF0dGFjayBwb3NpdGlvbnMgdGhhdCBhcmUgaW4gbWlzc2VzIG9yIGhpdHMhISEhISEhXG4gICAgICAgICAgICBhdHRhY2tFbmVteSgpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmFuZG9tUG9zaXRpb24gPSBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCldO1xuICAgICAgICAgICAgICAgIHdoaWxlICggaXNBcnJheUluQXJyYXkoIHRoaXMudHJpZXMsIHJhbmRvbVBvc2l0aW9uKSl7XG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbVBvc2l0aW9uID0gW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50cmllcy5wdXNoKCByYW5kb21Qb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgZW5lbXlHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayggcmFuZG9tUG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAge1xuICAgICAgICBnYW1lQm9hcmQ6Z2FtZUJvYXJkLFxuICAgICAgICBlbmVteUdhbWVib2FyZDplbmVteUdhbWVib2FyZCxcbiAgICAgICAgdHJpZXM6W10sXG4gICAgICAgIGF0dGFja0VuZW15KCAgcG9zaXRpb24gKSB7XG4gICAgICAgICAgICBpZiAoICFpc0FycmF5SW5BcnJheSggdGhpcy50cmllcywgcG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZW5lbXlHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayggcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZXMucHVzaCggcG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmV4cG9ydCB7Y3JlYXRlUGxheWVyfTsiLCJpbXBvcnQgeyBjcmVhdGVHYW1lQm9hcmQgfSBmcm9tIFwiLi9HYW1lYm9hcmQuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVBsYXllciB9IGZyb20gXCIuL1BsYXllci5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlU2hpcCB9IGZyb20gXCIuL1NoaXAuanNcIjtcbmltcG9ydCB7IGNyZWF0ZU1haW4gfSBmcm9tIFwiLi9ET01cIjtcbmltcG9ydCB7IHVwZGF0ZSB9IGZyb20gXCIuL0RPTVwiO1xuXG5sZXQgdHVybiA9IFwicGxheWVyXCI7XG5cbmxldCBwbGF5ZXJCb2FyZCA9IGNyZWF0ZUdhbWVCb2FyZCgpO1xubGV0IGNvbXB1dGVyQm9hcmQgPSBjcmVhdGVHYW1lQm9hcmQoKTtcblxubGV0IHBsYXllcjtcbmxldCBjb21wdXRlcjtcblxuZnVuY3Rpb24gc3RhcnRHYW1lKCkge1xuXG4gICAgcGxhY2VQbGF5ZXJTaGlwcygpO1xuICAgIHBsYWNlQ29tcFNoaXBzKCk7XG4gICAgcGxheWVyID0gY3JlYXRlUGxheWVyKHBsYXllckJvYXJkLCBjb21wdXRlckJvYXJkLCBmYWxzZSk7XG4gICAgY29tcHV0ZXIgPSBjcmVhdGVQbGF5ZXIoY29tcHV0ZXJCb2FyZCwgcGxheWVyQm9hcmQsIHRydWUpO1xuXG4gICAgcGxheWVyLmF0dGFja0VuZW15KFswLCAxXSk7XG4gICAgcGxheWVyLmF0dGFja0VuZW15KFs1LCA1XSk7XG5cbiAgICBjb21wdXRlci5hdHRhY2tFbmVteSgpO1xuICAgIGNvbXB1dGVyLmF0dGFja0VuZW15KCk7XG5cbiAgICBjcmVhdGVNYWluKHBsYXllciwgY29tcHV0ZXIsIHR1cm4pO1xuXG5cbn1cblxuZnVuY3Rpb24gcGxhY2VQbGF5ZXJTaGlwcygpIHtcbiAgICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoIDUsIFswLDBdLCBcInZlcnRpY2FsXCIpO1xuICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcCggNCwgWzEsMF0sIFwidmVydGljYWxcIik7XG4gICAgcGxheWVyQm9hcmQucGxhY2VTaGlwKCAzLCBbMiwwXSwgXCJ2ZXJ0aWNhbFwiKTtcbiAgICBwbGF5ZXJCb2FyZC5wbGFjZVNoaXAoIDMsIFszLDBdLCBcInZlcnRpY2FsXCIpO1xuICAgIHBsYXllckJvYXJkLnBsYWNlU2hpcCggMiwgWzQsMF0sIFwidmVydGljYWxcIik7XG5cbn1cblxuZnVuY3Rpb24gcGxhY2VDb21wU2hpcHMoKXtcblxuICAgIC8vd2hpbGUoIGNvbXB1dGVyQm9hcmQuc2hpcHMubGVuZ3RoICE9IDEpIHtcbiAgICBjb21wdXRlckJvYXJkLnBsYWNlU2hpcCg1LCBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNSksIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUpXSwgXG4gICAgICAgIE1hdGgucmFuZG9tKCkgPiAuNSA/IFwiaG9yaXpvbnRhbFwiIDpcInZlcnRpY2FsXCIpO1xuICAgIC8vfVxuICAgIHdoaWxlKCBjb21wdXRlckJvYXJkLnNoaXBzLmxlbmd0aCAhPSAyKSB7XG5cbiAgICBjb21wdXRlckJvYXJkLnBsYWNlU2hpcCg0LCBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNiksIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDYpXSwgXG4gICAgICAgIE1hdGgucmFuZG9tKCkgPiAuNSA/IFwiaG9yaXpvbnRhbFwiIDpcInZlcnRpY2FsXCIpO1xuICAgIH1cbiAgICB3aGlsZSggY29tcHV0ZXJCb2FyZC5zaGlwcy5sZW5ndGggIT0gMykge1xuXG4gICAgY29tcHV0ZXJCb2FyZC5wbGFjZVNoaXAoMywgW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDcpLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA3KV0sIFxuICAgICAgICBNYXRoLnJhbmRvbSgpID4gLjUgPyBcImhvcml6b250YWxcIiA6XCJ2ZXJ0aWNhbFwiKTtcbiAgICB9XG4gICAgd2hpbGUoIGNvbXB1dGVyQm9hcmQuc2hpcHMubGVuZ3RoICE9IDQpIHtcblxuICAgIGNvbXB1dGVyQm9hcmQucGxhY2VTaGlwKDMsIFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA3KSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNyldLCBcbiAgICAgICAgTWF0aC5yYW5kb20oKSA+IC41ID8gXCJob3Jpem9udGFsXCIgOlwidmVydGljYWxcIik7XG4gICAgfVxuICAgIHdoaWxlKCBjb21wdXRlckJvYXJkLnNoaXBzLmxlbmd0aCAhPSA1KSB7XG5cbiAgICBjb21wdXRlckJvYXJkLnBsYWNlU2hpcCgyLCBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOCksIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDgpXSwgXG4gICAgICAgIE1hdGgucmFuZG9tKCkgPiAuNSA/IFwiaG9yaXpvbnRhbFwiIDpcInZlcnRpY2FsXCIpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tXaW5uZXIoKSB7XG5cbiAgICBpZiAoY29tcHV0ZXJCb2FyZC5hbGxTdW5rKCkgfHwgcGxheWVyQm9hcmQuYWxsU3VuaygpKSB7XG4gICAgICAgIHR1cm4gPSBcImNvbXB1dGVyXCI7XG4gICAgICAgIC8vZW5kIGdhbWVcblxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHVybiA9IFwiY29tcHV0ZXJcIjtcbiAgICAgICAgYXdhaXQgc2xlZXAoMzAwMCk7XG4gICAgICAgIGNvbXB1dGVyLmF0dGFja0VuZW15KCk7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICB0dXJuID0gXCJwbGF5ZXJcIjtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gZW5kR2FtZSgpIHtcblxufVxuXG5mdW5jdGlvbiBnZXRUdXJuKCkge1xuICAgIHJldHVybiB0dXJuO1xufVxuXG5mdW5jdGlvbiBnZXRQbGF5ZXIoKSB7XG4gICAgcmV0dXJuIHBsYXllcjtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZXIoKSB7XG4gICAgcmV0dXJuIGNvbXB1dGVyO1xufVxuXG5mdW5jdGlvbiBzbGVlcChtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxuZXhwb3J0IHsgc3RhcnRHYW1lLCBjaGVja1dpbm5lciwgZ2V0VHVybiwgZ2V0UGxheWVyLCBnZXRDb21wdXRlciB9OyIsIi8vZmlyc3QgY3JlYXRlIGEgZnJhbWUgdGhhdCBzdGF5cyBzdGF0aWMgdGhyb3VnaG91dFxuaW1wb3J0IHsgY2hlY2tXaW5uZXIsIGdldFBsYXllciwgZ2V0Q29tcHV0ZXIsIGdldFR1cm4gfSBmcm9tIFwiLi9HYW1lLmpzXCI7XG5cbi8vaW1wb3J0IHsgcGxheWVyLCBjb21wdXRlciwgdHVybn0gZnJvbSBcIi4vR2FtZS5qc1wiO1xubGV0IHNlbGVjdGVkU2hpcDtcblxuZnVuY3Rpb24gY3JlYXRlTWFpbigpIHtcblxuXG4gICAgbGV0IGRvY3VtZW50Qm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuXG4gICAgLy9sZXQgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgLy9jb250ZW50LmlkID0gXCJjb250ZW50XCI7XG5cbiAgICBsZXQgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImhlYWRlclwiKTtcbiAgICBoZWFkZXIuaW5uZXJIVE1MID0gXCJCYXR0bGVzaGlwXCI7XG4gICAgaGVhZGVyLmlkID0gXCJoZWFkZXJcIjtcblxuICAgIGxldCBzZWNvbmRhcnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XG4gICAgc2Vjb25kYXJ5LmlubmVySFRNTCA9IFwiUGxhY2UgeW91ciBTaGlwcyFcIjtcbiAgICBzZWNvbmRhcnkuaWQgPSBcInNlY29uZGFyeVwiO1xuXG4gICAgbGV0IHN0YXJ0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBzdGFydEJ0bi5pbm5lckhUTUwgPSBcIlN0YXJ0IEdhbWVcIjtcbiAgICBzdGFydEJ0bi5pZCA9IFwic3RhcnQtYnV0dG9uXCI7XG5cbiAgICBsZXQgbWFpbkJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1haW5Cb2R5LmlkID0gXCJtYWluLWJvZHlcIjtcblxuICAgIGxldCBwbGF5ZXJCb2FyZCA9IGNyZWF0ZUdhbWVCb2FyZCgpO1xuXG4gICAgbGV0IGNvbXB1dGVyQm9hcmQgPSBjcmVhdGVDb21wdXRlckJvYXJkKCk7XG5cbiAgICBtYWluQm9keS5hcHBlbmRDaGlsZChwbGF5ZXJCb2FyZCk7XG4gICAgbWFpbkJvZHkuYXBwZW5kQ2hpbGQoY29tcHV0ZXJCb2FyZCk7XG5cblxuICAgIGRvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChoZWFkZXIpO1xuICAgIGRvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChzZWNvbmRhcnkpO1xuICAgIGRvY3VtZW50Qm9keS5hcHBlbmRDaGlsZChzdGFydEJ0bik7XG4gICAgZG9jdW1lbnRCb2R5LmFwcGVuZENoaWxkKG1haW5Cb2R5KTtcblxuICAgIC8vZG9jdW1lbnRCb2R5LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIHVwZGF0ZSgpO1xuXG4gICAgY3JlYXRlSGFuZGxlcnMoKTtcblxuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdhbWVCb2FyZCgpIHtcblxuICAgIGxldCBwbGF5ZXJCb2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcGxheWVyQm9hcmQuY2xhc3NOYW1lID0gXCJnYW1lLWJvYXJkXCI7XG4gICAgcGxheWVyQm9hcmQuaWQgPSBcInBsYXllci1ib2FyZFwiO1xuXG4gICAgbGV0IGdyaWQgPSBjcmVhdGVHcmlkKFwicGxheWVyXCIpO1xuXG4gICAgbGV0IGJvYXJkTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGJvYXJkTmFtZS5pbm5lckhUTUwgPSBcIlBsYXllciBib2FyZFwiO1xuICAgIGJvYXJkTmFtZS5jbGFzc05hbWUgPSBcImJvYXJkLW5hbWVcIjtcblxuICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKGdyaWQpO1xuICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKGJvYXJkTmFtZSk7XG5cbiAgICByZXR1cm4gcGxheWVyQm9hcmQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVyQm9hcmQoKSB7XG4gICAgbGV0IGNvbXB1dGVyQm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbXB1dGVyQm9hcmQuY2xhc3NOYW1lID0gXCJnYW1lLWJvYXJkXCI7XG4gICAgY29tcHV0ZXJCb2FyZC5pZCA9IFwiY29tcHV0ZXItYm9hcmRcIjtcblxuICAgIGxldCBncmlkID0gY3JlYXRlR3JpZChcImNvbXB1dGVyXCIpO1xuXG4gICAgbGV0IGJvYXJkTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgIGJvYXJkTmFtZS5pbm5lckhUTUwgPSBcIkNvbXB1dGVyIGJvYXJkXCI7XG4gICAgYm9hcmROYW1lLmNsYXNzTmFtZSA9IFwiYm9hcmQtbmFtZVwiO1xuXG4gICAgY29tcHV0ZXJCb2FyZC5hcHBlbmRDaGlsZChncmlkKTtcbiAgICBjb21wdXRlckJvYXJkLmFwcGVuZENoaWxkKGJvYXJkTmFtZSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZXJCb2FyZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR3JpZChuYW1lKSB7XG4gICAgbGV0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGdyaWQuY2xhc3NOYW1lID0gXCJncmlkXCI7XG4gICAgLy9mb3IgdGVzdGluZyBwdXJwb3Nlc1xuICAgIGdyaWQuc3R5bGUud2lkdGggPSBcIjUyMnB4XCI7XG4gICAgZ3JpZC5zdHlsZS5oZWlnaHQgPSBcIjUxMXB4XCI7XG4gICAgLy9lbmRcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgICAgIGxldCB1bml0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgLy9mb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgICB1bml0LnN0eWxlLndpZHRoID0gXCI1MHB4XCI7XG4gICAgICAgICAgICB1bml0LnN0eWxlLmhlaWdodCA9IFwiNTBweFwiO1xuICAgICAgICAgICAgdW5pdC5zdHlsZS5ib3JkZXJTdHlsZSA9IFwic29saWRcIjtcbiAgICAgICAgICAgIHVuaXQuc3R5bGUuYm9yZGVyV2lkdGggPSBcIjFweFwiO1xuICAgICAgICAgICAgdW5pdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsdWVcIlxuXG4gICAgICAgICAgICAvL2VuZFxuICAgICAgICAgICAgdW5pdC5jbGFzc05hbWUgPSBcInVuaXRcIjtcbiAgICAgICAgICAgIHVuaXQuaWQgPSBqICsgXCJ8XCIgKyBpICsgXCJ8XCIgKyBuYW1lO1xuICAgICAgICAgICAgZ3JpZC5hcHBlbmRDaGlsZCh1bml0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncmlkO1xufVxuXG5cbi8vZnVuY3Rpb24gc2hvdWxkIHJlY2lldmUgZ2FtZWJvYXJkIGFuZCBwbGF5ZXIgYW5kIGNyZWF0ZSBzb21ldGhpbmcgb3V0IG9mIHRoYXQsIFxuXG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuICAgIC8vcGxhY2UgdGhlIHNoaXBzXG4gICAgbGV0IHBsYXllclNoaXBzID0gZ2V0UGxheWVyKCkuZ2FtZUJvYXJkLnNoaXBzO1xuICAgIGxldCBjb21wdXRlclNoaXBzID0gZ2V0Q29tcHV0ZXIoKS5nYW1lQm9hcmQuc2hpcHM7XG5cbiAgICBwbGFjZVNoaXBzKHBsYXllclNoaXBzLCBcInBsYXllclwiKTtcbiAgICBwbGFjZVNoaXBzKGNvbXB1dGVyU2hpcHMsIFwiY29tcHV0ZXJcIik7XG5cbiAgICAvL21hcmsgcmVkIHRoZSBoaXQgdW5pdHNcbiAgICBtYXJrSGl0KGdldFBsYXllcigpLmdhbWVCb2FyZC5oaXRzLCBcInBsYXllclwiKTtcbiAgICBtYXJrTWlzc2VzKGdldFBsYXllcigpLmdhbWVCb2FyZC5taXNzZXMsIFwicGxheWVyXCIpO1xuXG4gICAgbWFya0hpdChnZXRDb21wdXRlcigpLmdhbWVCb2FyZC5oaXRzLCBcImNvbXB1dGVyXCIpO1xuICAgIG1hcmtNaXNzZXMoZ2V0Q29tcHV0ZXIoKS5nYW1lQm9hcmQubWlzc2VzLCBcImNvbXB1dGVyXCIpO1xuXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNoaXBzKCkge1xuICAgIFxuICAgIGxldCBzaGlwVW5pdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNoaXBcIik7XG4gICAgQXJyYXkuZnJvbShzaGlwVW5pdHMpLmZvckVhY2goIHVuaXQgPT4ge1xuICAgICAgICB1bml0LmNsYXNzTGlzdC5yZW1vdmUoXCJzaGlwXCIpO1xuICAgICAgICB1bml0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiYmx1ZVwiO1xuICAgIH0pXG5cbiAgICBwbGFjZVNoaXBzKCBnZXRQbGF5ZXIoKS5nYW1lQm9hcmQuc2hpcHMsIFwicGxheWVyXCIpO1xuICAgIHBsYWNlU2hpcHMoIGdldENvbXB1dGVyKCkuZ2FtZUJvYXJkLnNoaXBzLCBcImNvbXB1dGVyXCIpO1xuXG59XG5cblxuXG5mdW5jdGlvbiBwbGFjZVNoaXBzKHNoaXBzLCBuYW1lKSB7XG4gICAgc2hpcHMuZm9yRWFjaChzaGlwID0+IFtcbiAgICAgICAgc2hpcC5wb3NBcnJheS5mb3JFYWNoKHBvcyA9PiB7XG4gICAgICAgICAgICBsZXQgcG9zaXRpb24gPSBwb3NbMF0gKyBcInxcIiArIHBvc1sxXSArIFwifFwiICsgbmFtZTtcbiAgICAgICAgICAgIGxldCB1bml0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9zaXRpb24pO1xuICAgICAgICAgICAgdW5pdC5jbGFzc0xpc3QuYWRkKFwic2hpcFwiKTtcbiAgICAgICAgICAgIC8vV2FudCB0byBjaGFuZ2UgY29sb3IgdG8gYmx1ZSBpZiBjb21wdXRlciBpcyBwbGF5aW5nXG4gICAgICAgICAgICB1bml0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiYmxhY2tcIjtcbiAgICAgICAgfSlcbiAgICBdKVxufVxuXG5mdW5jdGlvbiBtYXJrSGl0KGhpdHMsIG5hbWUpIHtcbiAgICBoaXRzLmZvckVhY2goaGl0ID0+IHtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gaGl0WzBdICsgXCJ8XCIgKyBoaXRbMV0gKyBcInxcIiArIG5hbWU7XG4gICAgICAgIGxldCB1bml0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9zaXRpb24pO1xuICAgICAgICB1bml0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgfSlcbn1cbmZ1bmN0aW9uIG1hcmtNaXNzZXMobWlzc2VzLCBuYW1lKSB7XG4gICAgbWlzc2VzLmZvckVhY2gobWlzcyA9PiB7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IG1pc3NbMF0gKyBcInxcIiArIG1pc3NbMV0gKyBcInxcIiArIG5hbWU7XG4gICAgICAgIGxldCB1bml0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9zaXRpb24pO1xuICAgICAgICB1bml0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JleVwiO1xuICAgIH0pXG59XG5cbi8vRVZFTlQgSEFORExFUlNcblxuZnVuY3Rpb24gY3JlYXRlSGFuZGxlcnMoKSB7XG5cbiAgICBsZXQgZ3JpZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tcHV0ZXItYm9hcmRcIik7XG4gICAgZ3JpZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInVuaXRcIikgJiYgZ2V0VHVybigpID09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgIGF0dGFjayhlLnRhcmdldC5pZCk7XG4gICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgIGNoZWNrV2lubmVyKCk7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgbGV0IHBsYXllckdyaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllci1ib2FyZFwiKTtcbiAgICBwbGF5ZXJHcmlkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hpcFwiKSkge1xuICAgICAgICAgICAgc2hpcENsaWNrZWQoZSk7XG4gICAgICAgIH0gICAgICBcbiAgICB9KVxuXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5zaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgICAgICAgICAgc2hpcC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICB9KVxuXG4gICAgfSlcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47IFxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Yoc2VsZWN0ZWRTaGlwKSAhPSBcInVuZGVmaW5lZFwiICkge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwiZG93blwiKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwidXBcIik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwibGVmdFwiKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5tb3ZlKCBzZWxlY3RlZFNoaXAsIFwicmlnaHRcIik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVTaGlwcygpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSwgdHJ1ZSk7XG5cblxufVxuXG5cbmZ1bmN0aW9uIGF0dGFjayh1bml0SWQpIHtcbiAgICBsZXQgcG9zaXRpb24gPSB1bml0SWQuc3BsaXQoXCJ8XCIpO1xuICAgIGNvbnNvbGUubG9nKFwiYXR0YWNrIGNsaWNrZWQhXCIpXG4gICAgaWYgKHBvc2l0aW9uWzJdID09IFwiY29tcHV0ZXJcIikge1xuICAgICAgICBsZXQgcG9zID0gW3BhcnNlSW50KHBvc2l0aW9uWzBdKSwgcGFyc2VJbnQocG9zaXRpb25bMV0pXTtcbiAgICAgICAgZ2V0UGxheWVyKCkuYXR0YWNrRW5lbXkocG9zKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyggcGxheWVyLmVuZW15R2FtZWJvYXJkLm1pc3NlcylcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gc2hpcENsaWNrZWQoZSkge1xuICAgIGxldCBwb3NpdGlvbiA9IGUudGFyZ2V0LmlkLnNwbGl0KFwifFwiKTtcbiAgICBpZiAocG9zaXRpb25bMl0gPT0gXCJwbGF5ZXJcIikge1xuXG4gICAgICAgIGxldCBzZWxlY3RlZFBvcyA9IFtwYXJzZUludChwb3NpdGlvblswXSksIHBhcnNlSW50KHBvc2l0aW9uWzFdKV07XG4gICAgICAgIGdldFBsYXllcigpLmdhbWVCb2FyZC5zaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgICAgICAgICAgc2hpcC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgc2hpcC5wb3NBcnJheS5mb3JFYWNoKHBvcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHNlbGVjdGVkUG9zKSA9PSBKU09OLnN0cmluZ2lmeShwb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2hpcCA9IHNoaXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICBzZWxlY3RlZFNoaXAuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyhcInNlbGVjdGVkXCIgKyBzZWxlY3RlZFNoaXApO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxufVxuXG5cbmV4cG9ydCB7IGNyZWF0ZU1haW4sIHVwZGF0ZSB9OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiX2kyIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY3JlYXRlU2hpcCIsInN0YXJ0UG9zIiwib3JpZW50YXRpb24iLCJwb3NBcnJheSIsInNlbGVjdGVkIiwiaGl0cyIsImhpdCIsInBvc2l0aW9uIiwiYXJyIiwiaXRlbV9hc19zdHJpbmciLCJzb21lIiwiZWxlIiwiaXNTdW5rIiwibW92ZSIsImRpcmVjdGlvbiIsIngiLCJjb25zb2xlIiwibG9nIiwiY3JlYXRlR2FtZUJvYXJkIiwiaXNBcnJheUluQXJyYXkiLCJzaGlwcyIsIm1pc3NlcyIsInBsYWNlU2hpcCIsImJsb2NraW5nIiwic2hpcCIsImZvckVhY2giLCJvdGhlclNoaXAiLCJwb3MiLCJyZWNlaXZlQXR0YWNrIiwiaXNIaXQiLCJhbGxTdW5rIiwic3VuayIsIm5ld1NoaXAiLCJjYW5Nb3ZlIiwiY3JlYXRlUGxheWVyIiwiZ2FtZUJvYXJkIiwiZW5lbXlHYW1lYm9hcmQiLCJpc0NvbXB1dGVyIiwidHJpZXMiLCJhdHRhY2tFbmVteSIsInJhbmRvbVBvc2l0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicGxheWVyIiwiY29tcHV0ZXIiLCJzZWxlY3RlZFNoaXAiLCJ0dXJuIiwicGxheWVyQm9hcmQiLCJjb21wdXRlckJvYXJkIiwiYXN5bmMiLCJjaGVja1dpbm5lciIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImdldFBsYXllciIsImdldENvbXB1dGVyIiwiY3JlYXRlR3JpZCIsIm5hbWUiLCJncmlkIiwiY2xhc3NOYW1lIiwid2lkdGgiLCJoZWlnaHQiLCJqIiwidW5pdCIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwbGF5ZXJTaGlwcyIsImNvbXB1dGVyU2hpcHMiLCJwbGFjZVNoaXBzIiwibWFya0hpdCIsIm1hcmtNaXNzZXMiLCJnZXRFbGVtZW50QnlJZCIsImNsYXNzTGlzdCIsImFkZCIsIm1pc3MiLCJwbGFjZUNvbXBTaGlwcyIsImRvY3VtZW50Qm9keSIsImhlYWRlciIsImlubmVySFRNTCIsInNlY29uZGFyeSIsInN0YXJ0QnRuIiwibWFpbkJvZHkiLCJib2FyZE5hbWUiLCJjcmVhdGVDb21wdXRlckJvYXJkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNvbnRhaW5zIiwidW5pdElkIiwic3BsaXQiLCJwYXJzZUludCIsImF0dGFjayIsInNlbGVjdGVkUG9zIiwic3RvcFByb3BhZ2F0aW9uIiwic2hpcENsaWNrZWQiLCJldmVudCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJzaGlwVW5pdHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiQXJyYXkiLCJmcm9tIiwidXBkYXRlU2hpcHMiLCJwcmV2ZW50RGVmYXVsdCIsImNyZWF0ZU1haW4iXSwic291cmNlUm9vdCI6IiJ9