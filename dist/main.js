(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: "Montserrat", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n    border-style: solid;\n    border-width: 1px;\n    padding:10px;\n    background-color: #fdffa9;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.selected {\n    opacity:.5;\n}\n\n.player.ship:hover {\n    opacity: .5;\n}\n\n.computer:hover {\n    opacity:.5;\n}\n\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-color: black;\n}\n\n/* Control for computer visibility */\n.computer {\n    background-color: #bce2f1 ;\n    border-color: #aaaaaa;\n}  \n\n.miss {\n    /* background-image: url(\'./images/splash.png\');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url(\'./images/flame.png\');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n.hit:hover {\n    opacity:1;\n}\n\n.miss:hover{\n    opacity:1;\n}\n\n.highlighted {\n    border-color: red;\n}\n\n\n\n\n\n\n/*Instruction Screen*/\n#instructions-title {\n    text-align: center;\n    font-size: 2vw;\n}\n.instructions-header {\n    font-size: 1vw;\n    font-family: "Raleway", sans-serif;\n\n}\n\n/* Game Over Screen*/\n#game-over-title{\n    text-align: center;\n    font-size: 4vw;\n}\n\n#game-over-description {\n    font-size: 2vw;\n    text-align: center;\n}\n\n/* .description {\n} */\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #f4f5f5;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 30vw;\n    height: 70vh;\n    border-radius: 10px;\n    overflow-y:auto;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: "Montserrat", sans-serif;\n    font-weight: 900;\n    font-size: 3vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}\n\n.board-name {\n    font-size: 4vh;\n}\n\n/*Indicator*/\n.indicator {\n    height:100px;\n    width:100px;\n    display: flex;\n    /* background-color: #bce2f1; */\n    flex-direction: column-reverse;\n    align-items: center;\n    justify-content: center;\n    border-style: solid;\n    border-radius: 1px;\n    border-width: 0px;\n\n    gap:5px;\n    margin-top: 50px;\n}\n\n.indicator-row {\n    display:flex;\n    gap:2px;\n}\n\n.indicator-unit {\n    height:10px;\n    width:10px;\n    background-color: #839b97;\n}\n\n#player-indicator {\n    margin-right: -9vw;\n}\n\n#computer-indicator {\n    margin-left: -9vw;\n}\n\n.display-shots {\n    font-size: 3vh;\n    margin-top: 0;\n}\n/* \n.divider {\n    border-left: 5px none black;\n    height: 45vh;\n} */\n.modal-content img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100%;\n    max-height: 100%;\n}\n\nfooter {\n    background-color: none;\n    height:5em;\n    display:flex;\n    align-items: center;\n    font-family: Montserrat, Helvetica, sans-serif;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: "Montserrat", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n    border-style: solid;\n    border-width: 1px;\n    padding:10px;\n    background-color: #fdffa9;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.selected {\n    opacity:.5;\n}\n\n.player.ship:hover {\n    opacity: .5;\n}\n\n.computer:hover {\n    opacity:.5;\n}\n\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-color: black;\n}\n\n/* Control for computer visibility */\n.computer {\n    background-color: #bce2f1 ;\n    border-color: #aaaaaa;\n}  \n\n.miss {\n    /* background-image: url(\'./images/splash.png\');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url(\'./images/flame.png\');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n.hit:hover {\n    opacity:1;\n}\n\n.miss:hover{\n    opacity:1;\n}\n\n.highlighted {\n    border-color: red;\n}\n\n\n\n\n\n\n/*Instruction Screen*/\n#instructions-title {\n    text-align: center;\n    font-size: 2vw;\n}\n.instructions-header {\n    font-size: 1vw;\n    font-family: "Raleway", sans-serif;\n\n}\n\n/* Game Over Screen*/\n#game-over-title{\n    text-align: center;\n    font-size: 4vw;\n}\n\n#game-over-description {\n    font-size: 2vw;\n    text-align: center;\n}\n\n/* .description {\n} */\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #f4f5f5;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 30vw;\n    height: 70vh;\n    border-radius: 10px;\n    overflow-y:auto;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: "Montserrat", sans-serif;\n    font-weight: 900;\n    font-size: 3vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}\n\n.board-name {\n    font-size: 4vh;\n}\n\n/*Indicator*/\n.indicator {\n    height:100px;\n    width:100px;\n    display: flex;\n    /* background-color: #bce2f1; */\n    flex-direction: column-reverse;\n    align-items: center;\n    justify-content: center;\n    border-style: solid;\n    border-radius: 1px;\n    border-width: 0px;\n\n    gap:5px;\n    margin-top: 50px;\n}\n\n.indicator-row {\n    display:flex;\n    gap:2px;\n}\n\n.indicator-unit {\n    height:10px;\n    width:10px;\n    background-color: #839b97;\n}\n\n#player-indicator {\n    margin-right: -9vw;\n}\n\n#computer-indicator {\n    margin-left: -9vw;\n}\n\n.display-shots {\n    font-size: 3vh;\n    margin-top: 0;\n}\n/* \n.divider {\n    border-left: 5px none black;\n    height: 45vh;\n} */\n.modal-content img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100%;\n    max-height: 100%;\n}\n\nfooter {\n    background-color: none;\n    height:5em;\n    display:flex;\n    align-items: center;\n    font-family: Montserrat, Helvetica, sans-serif;\n}'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],A=a[c]||0,d="".concat(c," ").concat(A);a[c]=A+1;var h=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var u=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:u,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=r(n,o),c=0;c<a.length;c++){var A=t(a[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},43:(n,e,t)=>{n.exports=t.p+"946cf2f3eeeb7da168db.png"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{function n(n,e,t,r){let o=[e],a=0;"carrier"==r||"cruiser"==r?a=3:"destroyer"==r?a=2:"submarine"==r&&(a=1);for(let r=1;r<n;r++)"1"==t?o.push([e[0],e[1]-r]):"2"==t?o.push([e[0]+r,e[1]-r]):"3"==t?o.push([e[0]+r,e[1]]):"4"==t?o.push([e[0]+r,e[1]+r]):"5"==t?o.push([e[0],e[1]+r]):"6"==t?o.push([e[0]-r,e[1]+r]):"7"==t?o.push([e[0]-r,e[1]]):"8"==t&&o.push([e[0]-r,e[1]-r]);return{shotsPerUnit:a,name:r,selected:!1,startPos:e,posArray:o,hits:[],length:n,orientation:t,hit(n){return t=this.posArray,r=n,o=JSON.stringify(r),!!t.some((function(n){return JSON.stringify(n)===o}))&&(console.log("got hit"),this.hits.push(n),e=this.name,"player"==p?"carrier"==e?c[0]=c[0]-3:"cruiser"==e?c[1]=c[1]-3:"destroyer"==e?c[2]=c[2]-2:"submarine"==e&&(c[3]=c[3]-1):"computer"==p&&("carrier"==e?l[0]=l[0]-3:"cruiser"==e?l[1]=l[1]-3:"destroyer"==e?l[2]=l[2]-2:"submarine"==e&&(l[3]=l[3]-1)),!0);var e,t,r,o},isSunk(){return this.hits.length==this.length},move(n){switch(n){case"right":this.startPos=[this.startPos[0]+1,this.startPos[1]],this.posArray=this.posArray.map((n=>[n[0]+1,n[1]]));break;case"left":this.startPos=[this.startPos[0]-1,this.startPos[1]],this.posArray=this.posArray.map((n=>[n[0]-1,n[1]]));break;case"down":this.startPos=[this.startPos[0],this.startPos[1]+1],this.posArray=this.posArray.map((n=>[n[0],n[1]+1]));break;case"up":this.startPos=[this.startPos[0],this.startPos[1]-1],this.posArray=this.posArray.map((n=>[n[0],n[1]-1]))}},rotate(){this.posArray.length=0,this.posArray=[this.startPos],"1"==this.orientation?this.orientation="2":"2"==this.orientation?this.orientation="3":"3"==this.orientation?this.orientation="4":"4"==this.orientation?this.orientation="5":"5"==this.orientation?this.orientation="6":"6"==this.orientation?this.orientation="7":"7"==this.orientation?this.orientation="8":"8"==this.orientation&&(this.orientation="1");for(let n=1;n<this.length;n++)"1"==this.orientation?this.posArray.push([this.startPos[0],this.startPos[1]-n]):"2"==this.orientation?this.posArray.push([this.startPos[0]+n,this.startPos[1]-n]):"3"==this.orientation?this.posArray.push([this.startPos[0]+n,this.startPos[1]]):"4"==this.orientation?this.posArray.push([this.startPos[0]+n,this.startPos[1]+n]):"5"==this.orientation?this.posArray.push([this.startPos[0],this.startPos[1]+n]):"6"==this.orientation?this.posArray.push([this.startPos[0]-n,this.startPos[1]+n]):"7"==this.orientation?this.posArray.push([this.startPos[0]-n,this.startPos[1]]):"8"==this.orientation&&this.posArray.push([this.startPos[0]-n,this.startPos[1]-n])},getShots(){return(this.length-this.hits.length)*a}}}function e(){function e(n,e){var t=JSON.stringify(e);return n.some((function(n){return JSON.stringify(n)===t}))}return{ships:[],hits:[],misses:[],placeShip(t,r,o,a){let i=!1,s=n(t,r,o,a);this.ships.forEach((n=>{n.posArray.forEach((n=>{e(s.posArray,n)&&(i=!0)}))})),i||this.ships.push(s)},receiveAttack(n){let e=!1;return this.ships.forEach((t=>{t.hit(n)&&(this.hits.push(n),e=!0)})),e||this.misses.push(n),e},allSunk(){let n=!0;return this.ships.forEach((e=>{e.isSunk()||(n=!1)})),n},move(t,r){let o,a=!0;switch(r){case"right":o=n(t.length,[t.posArray[0][0]+1,t.posArray[0][1]],t.orientation,t.name);break;case"left":o=n(t.length,[t.posArray[0][0]-1,t.posArray[0][1]],t.orientation,t.name);break;case"down":o=n(t.length,[t.posArray[0][0],t.posArray[0][1]+1],t.orientation,t.name);break;case"up":o=n(t.length,[t.posArray[0][0],t.posArray[0][1]-1],t.orientation,t.name)}this.ships.forEach((n=>{n!=t&&n.posArray.forEach((n=>{e(o.posArray,n)&&(console.log("anothership in the way!!!"),a=!1)})),o.posArray.forEach((n=>{(n[0]>9||n[1]>9||n[0]<0||n[1]<0)&&(console.log("reached the border!!"),a=!1)}))})),console.log("can move:"+a+" in "+r),a?(t.move(r),console.log(this.ships)):P(t)},rotate(t){let r,o=!0;"1"==t.orientation?r=n(t.length,t.posArray[0],"2",t.name):"2"==t.orientation?r=n(t.length,t.posArray[0],"3",t.name):"3"==t.orientation?r=n(t.length,t.posArray[0],"4",t.name):"4"==t.orientation?r=n(t.length,t.posArray[0],"5",t.name):"5"==t.orientation?r=n(t.length,t.posArray[0],"6",t.name):"6"==t.orientation?r=n(t.length,t.posArray[0],"7",t.name):"7"==t.orientation?r=n(t.length,t.posArray[0],"8",t.name):"8"==t.orientation&&(r=n(t.length,t.posArray[0],"1",t.name)),console.log(r),this.ships.forEach((n=>{n!=t&&n.posArray.forEach((n=>{e(r.posArray,n)&&(console.log("anothership in the way!!!"),o=!1)})),r.posArray.forEach((n=>{(n[0]>9||n[1]>9||n[0]<0||n[1]<0)&&(console.log("reached the border!!"),o=!1)}))})),console.log("can rotate: "+o),o?(t.rotate(),console.log(this.ships)):P(t)}}}function r(n,e,t){function r(n,e){var t=JSON.stringify(e);return n.some((function(n){return JSON.stringify(n)===t}))}return t?{gameBoard:n,enemyGameboard:e,tries:[],mode:"random",huntArray:[],attackEnemy(){if("random"==this.mode){let n=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];for(;r(this.tries,n);)n=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];this.tries.push(n),e.receiveAttack(n)&&(this.huntArray.push([n[0]+1,n[1]]),this.huntArray.push([n[0]-1,n[1]]),this.huntArray.push([n[0],n[1]+1]),this.huntArray.push([n[0],n[1]-1]),this.huntArray.push([n[0]+1,n[1]-1]),this.huntArray.push([n[0]-1,n[1]+1]),this.huntArray.push([n[0]+1,n[1]+1]),this.huntArray.push([n[0]-1,n[1]-1]),this.mode="target")}else if("target"==this.mode){let n=this.huntArray.pop();for(;void 0!==n&&(r(this.tries,n)||n[0]<0||n[0]>9||n[1]<0||n[1]>9);)n=this.huntArray.pop();if(void 0===n)for(n=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];r(this.tries,n);)n=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];this.tries.push(n),e.receiveAttack(n)&&(this.huntArray.push([n[0]+1,n[1]]),this.huntArray.push([n[0]-1,n[1]]),this.huntArray.push([n[0],n[1]+1]),this.huntArray.push([n[0],n[1]-1]),this.huntArray.push([n[0]+1,n[1]-1]),this.huntArray.push([n[0]-1,n[1]+1]),this.huntArray.push([n[0]+1,n[1]+1]),this.huntArray.push([n[0]-1,n[1]-1])),console.log("array length: "+this.huntArray.length),0==this.huntArray.length&&(console.log("WE SWITCHED BACK TO RANDOM"),this.mode="random")}}}:{gameBoard:n,enemyGameboard:e,tries:[],attackEnemy(n){r(this.tries,n)||(e.receiveAttack(n),this.tries.push(n))}}}let o,a,i,s,l,c,A,d,h,p="player",u=!1,m=!1;async function f(){if(a.allSunk()||o.allSunk())O("Game Over"),p="computer",g();else if(A-=1,A<0&&(A=0),d=c[h],M(),A<=0){p="computer",S(),O("Opponent Turn"),await v(1500);let n=d;for(let e=0;e<n;e++)d--,s.attackEnemy(),await v(200),M(),o.allSunk()&&(n=0);for(h++,4==h&&(h=0);!o.allSunk()&&0==l[h];){n=c[h],d=c[h],O("Your Turn"),S(),await v(1500),S(),O("Opponent Turn"),await v(1500);for(let e=0;e<n;e++)d--,s.attackEnemy(),await v(200),M(),o.allSunk()&&(n=0);h++,4==h&&(h=0)}d=c[h],M(),console.log("current computer shot"+n),a.allSunk()||o.allSunk()?(O("Game Over"),p="computer",M(),g()):(A=l[h],M(),p="player",O("Your Turn"),S(),console.log("current player shot"+A))}}function g(){m=!0,console.log("Game Ended"),function(){let n=document.getElementById("gameOver"),e=document.getElementById("close-game-button"),t=document.getElementById("game-over-description"),r=document.getElementById("game-over-title");B().gameBoard.allSunk()?(r.innerHTML="You Won",t.innerHTML='You sunk all the opponent\'s ships!<br/><br/>Click "Reset" to play again.'):(r.innerHTML="You Lost",t.innerHTML='The opponent sunk all your ships!<br/><br/>Click "Reset" to play again.'),n.style.display="block",e.onclick=function(){n.style.display="none"},window.onclick=function(e){if(e.target==n){n.style.display="none";let e=document.getElementById("instructions");window.onclick=function(n){n.target==e&&(e.style.display="none")}}}}()}function y(){return p}function C(){return i}function B(){return s}function b(){return u}function I(){return m}function v(n){return new Promise((e=>setTimeout(e,n)))}var E=t(43);let k;function w(n){let e=document.createElement("div");e.className="indicator",e.id=n+"-indicator";let t=["submarine","destroyer","cruiser","carrier"],r=0;return[3,3,3,4].forEach((o=>{let a=document.createElement("div");a.className="indicator-row";for(let e=0;e<o;e++){let e=document.createElement("div");e.className="indicator-unit",e.classList.add(o+"|"+n+"|"+t[r]),a.appendChild(e)}e.appendChild(a),r++})),e}function x(n){let e=document.createElement("div");e.className="grid";for(let t=0;t<10;t++)for(let r=0;r<10;r++){let o=document.createElement("div");o.className="unit",o.classList.add(n),o.id=r+"|"+t+"|"+n,e.appendChild(o)}return e}function M(){L(C().gameBoard.ships,"player"),L(B().gameBoard.ships,"computer"),H(C().gameBoard.hits,"player"),N(C().gameBoard.misses,"player"),H(B().gameBoard.hits,"computer"),N(B().gameBoard.misses,"computer"),C().gameBoard.ships.forEach((n=>{if(n.isSunk()){let e=n.length+"|player|"+n.name;Array.from(document.getElementsByClassName(e)).forEach((n=>{n.style.opacity=".5"}))}})),B().gameBoard.ships.forEach((n=>{if(n.isSunk()){let e=n.length+"|computer|"+n.name;console.log(e),Array.from(document.getElementsByClassName(e)).forEach((n=>{n.style.opacity=".5"}))}})),function(){let n=document.getElementById("player-shots");document.getElementById("computer-shots").innerHTML="Shots: "+A,n.innerHTML="Shots: "+d}()}function S(){let n=document.getElementById("player-board"),e=document.getElementById("computer-board");"player"==y()?(e.style.opacity="1",n.style.opacity=".5"):(e.style.opacity=".5",n.style.opacity="1")}function T(){let n=document.querySelectorAll(".ship");Array.from(n).forEach((n=>{n.classList.remove("ship"),n.classList.remove("selected"),"1"!=n.innerHTML&&"2"!=n.innerHTML&&"3"!=n.innerHTML||(n.innerHTML="")})),L(C().gameBoard.ships,"player"),L(B().gameBoard.ships,"computer")}function L(n,e){n.forEach((n=>[n.posArray.forEach((t=>{let r=t[0]+"|"+t[1]+"|"+e,o=document.getElementById(r);if(o.classList.add("ship"),n.selected&&o.classList.add("selected"),"player"==e&&!o.firstChild)switch(n.name){case"carrier":case"cruiser":o.innerHTML=3;break;case"destroyer":o.innerHTML=2;break;case"submarine":o.innerHTML=1}}))]))}function H(n,e){n.forEach((n=>{let t=n[0]+"|"+n[1]+"|"+e,r=document.getElementById(t);for(r.classList.add("hit");r.firstChild;)r.removeChild(r.firstChild);let o=document.createElement("p");o.innerHTML="&#10005;",r.appendChild(o)}))}function N(n,e){n.forEach((n=>{let t=n[0]+"|"+n[1]+"|"+e,r=document.getElementById(t);for(r.classList.add("miss");r.firstChild;)r.removeChild(r.firstChild);let o=document.createElement("p");r.appendChild(o)}))}function P(n){let e=[];n.posArray.forEach((n=>{let t=n[0]+"|"+n[1]+"|player",r=document.getElementById(t);e.push(r)})),e.forEach((n=>{n.classList.add("highlighted")})),e.forEach((n=>{setTimeout((()=>{n.classList.remove("highlighted")}),100)}))}function O(n){document.getElementById("secondary").innerHTML=n}var Y=t(379),j=t.n(Y),z=t(795),q=t.n(z),W=t(569),G=t.n(W),U=t(565),Z=t.n(U),R=t(216),J=t.n(R),F=t(589),D=t.n(F),X=t(426),$={};$.styleTagTransform=D(),$.setAttributes=Z(),$.insert=G().bind(null,"head"),$.domAPI=q(),$.insertStyleElement=J(),j()(X.Z,$),X.Z&&X.Z.locals&&X.Z.locals,function n(){o=e(),a=e(),o.placeShip(4,[9,0],"5","carrier"),o.placeShip(3,[8,0],"5","cruiser"),o.placeShip(3,[7,0],"5","destroyer"),o.placeShip(3,[6,0],"5","submarine"),function(){for(;1!=a.ships.length;)a.placeShip(4,[Math.floor(7*Math.random()),3+Math.floor(4*Math.random())],Math.floor(3*Math.random())+2,"carrier");for(;2!=a.ships.length;)a.placeShip(3,[2+Math.floor(8*Math.random()),2+Math.floor(5*Math.random())],Math.floor(3*Math.random())+6,"cruiser");for(;3!=a.ships.length;)a.placeShip(3,[Math.floor(8*Math.random()),2+Math.floor(5*Math.random())],Math.floor(3*Math.random())+2,"destroyer");for(;4!=a.ships.length;)a.placeShip(3,[2+Math.floor(5*Math.random()),Math.floor(8*Math.random())],Math.floor(3*Math.random())+4,"submarine")}(),i=r(o,a,!1),s=r(a,o,!0),l=[12,9,6,3],c=[12,9,6,3],A=l[0],d=c[0],h=0,function(){let e=document.querySelector("body");(function(){let n=document.querySelector("body"),e=document.createElement("div");e.id="instructions",e.className="modal";let t=document.createElement("div");t.className="modal-content";let r=document.createElement("span");r.className="close",r.id="close-instructions-button",r.innerHTML="&times;";let o=document.createElement("h3");o.innerHTML="Welcome to Battleship",o.id="instructions-title";let a=document.createElement("h4");a.innerHTML="Game Objective",a.className="instructions-header";let i=document.createElement("p");i.className="description",i.innerHTML="The objective of Battleship is to try and sink all of the opponent's    ships before they sink all of your ships. All of the opponent's ships are hidden somewhere    on their board. <br/><br/>Each round, you try and hit the opponent's ships by selecting a coordinate of one of the squares    on the board. The opponent also tries to hit your ships by selecting coordinates. Neither you nor    the opponent can see the other's board so you must guess where they are. Each board has two grids:    the left section for the player's ships and the right section for the opponent's ships.";let s=document.createElement("h4");s.innerHTML="Starting a New Game",s.className="instructions-header";let l=document.createElement("p");l.className="description",l.innerHTML="Each player places the 5 ships somwhere on their board. A ship may be selected    by clicking on the ship.";let c=document.createElement("p");c.className="description",c.innerHTML='Then, use the arrow keys to move it up, down, right, or left, and use the space bar to     rotate the ship.<br/><br/> The ships can    only be placed vertically or horizontally. Diagonal placement is not allowed. No part of a ship may hang    off the edge of the board. Ships may not overlap each other. No ships may be placed on another ship.     Once the guessing begins, players may not move the ships. The 5 ships are:  Carrier (occupies 5 spaces),    Battleship (4), Cruiser (3), Destroyer (2), and Submarine (1). <br/><br/> When you are ready, click "start" to begin    the game.';let A=new Image;A.src=E;let d=document.createElement("h4");d.innerHTML="Playing the Game",d.className="instructions-header";let h=document.createElement("p");h.className="description",h.innerHTML="Each round, a player makes a guess by selecting coordinates on the opponent's grid.    If the guessed coordinate hits an enemy ship, the grid will be marked with a red X. If the guess misses, the grid will be    marked with a white dot. For example, if you guess (1,6) and the opponent does not have any ship located at (1,6), the     opponent's grid would be marked with a white dot at (1,6).<br/><br/> When all of the squares that one of your ships occupies are hit    the ship will be sunk, and this will be indicated to both players. As soon as all of one player's ships have been sunk, the     game ends. <br/><br/>To start a new game, or to reset at any point within a game, click \"reset\".",t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(i),t.appendChild(s),t.appendChild(l),t.appendChild(A),t.appendChild(c),t.appendChild(d),t.appendChild(h),e.appendChild(t),n.appendChild(e)})(),function(){let n=document.querySelector("body"),e=document.createElement("div");e.id="gameOver",e.className="modal",e.style.display="none";let t=document.createElement("div");t.className="modal-content";let r=document.createElement("h1");r.id="game-over-title",r.innerHTML="Game Over";let o=document.createElement("p");o.id="game-over-description";let a=document.createElement("span");a.className="close",a.id="close-game-button",a.innerHTML="&times;",t.appendChild(a),t.appendChild(r),t.appendChild(o),e.appendChild(t),n.appendChild(e)}();let t=document.createElement("header");t.innerHTML="Battleship",t.id="header";let r=document.createElement("h1");r.innerHTML="Place Your Ships",r.id="secondary";let o=document.createElement("button");o.innerHTML="Start",o.id="start-button";let a=document.createElement("div");a.id="main-body";let i=w("player"),s=w("computer"),l=function(){let n=document.createElement("div");n.className="game-board",n.id="player-board";let e=document.createElement("p");e.className="display-shots",e.id="player-shots",e.innerHTML="Shots: 12";let t=x("player"),r=document.createElement("p");return r.innerHTML="Player",r.className="board-name",n.appendChild(e),n.appendChild(t),n.appendChild(r),n}(),c=function(){let n=document.createElement("div");n.className="game-board",n.id="computer-board";let e=document.createElement("p");e.className="display-shots",e.id="computer-shots",e.innerHTML="Shots: 12";let t=x("computer"),r=document.createElement("p");return r.innerHTML="Computer",r.className="board-name",n.appendChild(e),n.appendChild(t),n.appendChild(r),n}();a.appendChild(i),a.appendChild(l),a.appendChild(c),a.appendChild(s);let A=document.createElement("button");A.innerHTML="Help",A.id="help-button",e.appendChild(t),e.appendChild(r),e.appendChild(o),e.appendChild(a),e.appendChild(A);let d=document.createElement("footer");d.innerHTML="Created By Seulchan Han",e.appendChild(d),M(),function(){let e=document.getElementById("start-button");e.addEventListener("click",(()=>{if("Start"==e.innerHTML)u=!0,O("Your Turn"),console.log("Game started!!!!"),e.innerHTML="Reset";else if("Reset"==e.innerHTML){e.innerHTML="Start";let t=document.querySelector("body");for(;t.firstChild;)t.removeChild(t.firstChild);u=!1,m=!1,p="player",n(),document.getElementById("instructions").style.display="none"}})),document.getElementById("computer-board").addEventListener("click",(n=>{!I()&&b()&&n.target.classList.contains("unit")&&"player"==y()&&function(n){let e=n.split("|");console.log("attack clicked!");let t=[parseInt(e[0]),parseInt(e[1])];var r,o,a;"computer"!=e[2]||(r=C().tries,o=t,a=JSON.stringify(o),r.some((function(n){return JSON.stringify(n)===a})))||(C().attackEnemy(t),M(),f())}(n.target.id)})),document.getElementById("player-board").addEventListener("click",(n=>{I()||b()||!n.target.classList.contains("ship")||function(n){let e=n.target.id.split("|");if("player"==e[2]){let t=[parseInt(e[0]),parseInt(e[1])];C().gameBoard.ships.forEach((n=>{n.selected=!1,n.posArray.forEach((e=>{JSON.stringify(t)==JSON.stringify(e)&&(k=n)}))})),k.selected=!0,T(),n.stopPropagation()}}(n)})),window.addEventListener("click",(n=>{C().gameBoard.ships.forEach((n=>{n.selected=!1,T()}))})),window.addEventListener("keydown",(function(n){if(!n.defaultPrevented){if(void 0!==k&&!b()){switch(n.key){case"ArrowDown":C().gameBoard.move(k,"down");break;case"ArrowUp":C().gameBoard.move(k,"up");break;case"ArrowLeft":C().gameBoard.move(k,"left");break;case"ArrowRight":C().gameBoard.move(k,"right");break;case" ":C().gameBoard.rotate(k);break;default:return}T()}n.preventDefault()}}),!0),function(){let n=document.getElementById("instructions"),e=document.getElementById("close-instructions-button");document.getElementById("help-button").onclick=function(){n.style.display="block"},e.onclick=function(){n.style.display="none"},window.onclick=function(e){e.target==n&&(n.style.display="none")}}()}()}()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,