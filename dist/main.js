(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,"body {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:space-around;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n\n/*Instruction Screen*/\n\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #92e2ec;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 200px;\n    border-radius: 10px;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;;AAGA,qBAAqB;;AAErB;IACI,cAAc,EAAE,sBAAsB;IACtC,eAAe,EAAE,kBAAkB;IACnC,UAAU,EAAE,eAAe;IAC3B,kBAAkB,EAAE,wBAAwB;IAC5C,OAAO;IACP,MAAM;IACN,WAAW,EAAE,eAAe;IAC5B,YAAY,EAAE,gBAAgB;IAC9B,cAAc,EAAE,4BAA4B;IAC5C,4BAA4B,EAAE,mBAAmB;IACjD,iCAAiC,EAAE,qBAAqB;EAC1D;;EAEA,kBAAkB;EAClB;IACE,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,mBAAmB;;EAErB;;GAEC,qBAAqB;GACrB;IACC,cAAc;IACd,YAAY;IACZ,eAAe;IACf,iBAAiB;EACnB;;EAEA;;IAEE,WAAW;IACX,qBAAqB;IACrB,eAAe;EACjB",sourcesContent:["body {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:space-around;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n\n/*Instruction Screen*/\n\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #92e2ec;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 200px;\n    border-radius: 10px;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var h=n(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(u);else{var m=r(u,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var c=o(e,r),l=0;l<a.length;l++){var d=n(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e,t,n){let o=[t];for(let r=1;r<e;r++)"horizontal"==n?o.push([t[0]+r,t[1]]):"vertical"==n&&o.push([t[0],t[1]+r]);return{selected:!1,startPos:t,posArray:o,hits:[],length:e,orientation:n,hit(e){return t=this.posArray,n=e,o=JSON.stringify(n),!!t.some((function(e){return JSON.stringify(e)===o}))&&(console.log("got hit"),this.hits.push(e),!0);var t,n,o},isSunk(){return this.hits.length==this.length},move(e){switch(e){case"right":this.startPos=[this.startPos[0]+1,this.startPos[1]],this.posArray=this.posArray.map((e=>[e[0]+1,e[1]]));break;case"left":this.startPos=[this.startPos[0]-1,this.startPos[1]],this.posArray=this.posArray.map((e=>[e[0]-1,e[1]]));break;case"down":this.startPos=[this.startPos[0],this.startPos[1]+1],this.posArray=this.posArray.map((e=>[e[0],e[1]+1]));break;case"up":this.startPos=[this.startPos[0],this.startPos[1]-1],this.posArray=this.posArray.map((e=>[e[0],e[1]-1]))}},rotate(){this.posArray.length=0,this.posArray=[this.startPos],"horizontal"==this.orientation?this.orientation="vertical":this.orientation="horizontal";for(let e=1;e<this.length;e++)"horizontal"==this.orientation?this.posArray.push([this.startPos[0]+e,this.startPos[1]]):"vertical"==this.orientation&&this.posArray.push([this.startPos[0],this.startPos[1]+e])}}}function t(){function t(e,t){var n=JSON.stringify(t);return e.some((function(e){return JSON.stringify(e)===n}))}return{ships:[],hits:[],misses:[],placeShip(n,o,r){let a=!1,i=e(n,o,r);this.ships.forEach((e=>{e.posArray.forEach((e=>{t(i.posArray,e)&&(a=!0)}))})),a||this.ships.push(i)},receiveAttack(e){let t=!1;this.ships.forEach((n=>{n.hit(e)&&(this.hits.push(e),t=!0)})),t||this.misses.push(e)},allSunk(){let e=!0;return this.ships.forEach((t=>{t.isSunk()||(e=!1)})),e},move(n,o){let r,a=!0;switch(o){case"right":r=e(n.length,[n.posArray[0][0]+1,n.posArray[0][1]],n.orientation);break;case"left":r=e(n.length,[n.posArray[0][0]-1,n.posArray[0][1]],n.orientation);break;case"down":r=e(n.length,[n.posArray[0][0],n.posArray[0][1]+1],n.orientation);break;case"up":r=e(n.length,[n.posArray[0][0],n.posArray[0][1]-1],n.orientation)}this.ships.forEach((e=>{e!=n&&e.posArray.forEach((e=>{t(r.posArray,e)&&(console.log("anothership in the way!!!"),a=!1)})),r.posArray.forEach((e=>{(e[0]>9||e[1]>9||e[0]<0||e[1]<0)&&(console.log("reached the border!!"),a=!1)}))})),console.log("can move:"+a+" in "+o),a&&(n.move(o),console.log(this.ships))},rotate(n){let o,r=!0;o="horizontal"==n.orientation?e(n.length,n.posArray[0],"vertical"):e(n.length,n.posArray[0],"horizontal"),this.ships.forEach((e=>{e!=n&&e.posArray.forEach((e=>{t(o.posArray,e)&&(console.log("anothership in the way!!!"),r=!1)})),o.posArray.forEach((e=>{(e[0]>9||e[1]>9||e[0]<0||e[1]<0)&&(console.log("reached the border!!"),r=!1)}))})),console.log("can rotate: "+r),r&&(n.rotate(),console.log(this.ships))}}}function o(e,t,n){function o(e,t){var n=JSON.stringify(t);return e.some((function(e){return JSON.stringify(e)===n}))}return n?{gameBoard:e,enemyGameboard:t,tries:[],attackEnemy(){let e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];for(;o(this.tries,e);)e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];this.tries.push(e),t.receiveAttack(e)}}:{gameBoard:e,enemyGameboard:t,tries:[],attackEnemy(e){o(this.tries,e)||(t.receiveAttack(e),this.tries.push(e))}}}let r;function a(e){let t=document.createElement("div");t.className="grid",t.style.width="522px",t.style.height="511px";for(let n=0;n<10;n++)for(let o=0;o<10;o++){let r=document.createElement("div");r.style.width="50px",r.style.height="50px",r.style.borderStyle="solid",r.style.borderWidth="1px",r.style.backgroundColor="blue",r.className="unit",r.id=o+"|"+n+"|"+e,t.appendChild(r)}return t}function i(){s(v().gameBoard.ships,"player"),s(b().gameBoard.ships,"computer"),c(v().gameBoard.hits,"player"),l(v().gameBoard.misses,"player"),c(b().gameBoard.hits,"computer"),l(b().gameBoard.misses,"computer")}function s(e,t){e.forEach((e=>[e.posArray.forEach((e=>{let n=e[0]+"|"+e[1]+"|"+t,o=document.getElementById(n);o.classList.add("ship"),o.style.backgroundColor="black"}))]))}function c(e,t){e.forEach((e=>{let n=e[0]+"|"+e[1]+"|"+t;document.getElementById(n).style.backgroundColor="red"}))}function l(e,t){e.forEach((e=>{let n=e[0]+"|"+e[1]+"|"+t;document.getElementById(n).style.backgroundColor="grey"}))}let d,p,h,u,m="player",A=!1,f=!1;function y(){d=t(),p=t(),d.placeShip(5,[0,0],"vertical"),d.placeShip(4,[1,0],"vertical"),d.placeShip(3,[2,0],"vertical"),d.placeShip(3,[3,0],"vertical"),d.placeShip(2,[4,0],"vertical"),function(){for(p.placeShip(5,[Math.floor(5*Math.random()),Math.floor(5*Math.random())],Math.random()>.5?"horizontal":"vertical");2!=p.ships.length;)p.placeShip(4,[Math.floor(6*Math.random()),Math.floor(6*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;3!=p.ships.length;)p.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;4!=p.ships.length;)p.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;5!=p.ships.length;)p.placeShip(2,[Math.floor(8*Math.random()),Math.floor(8*Math.random())],Math.random()>.5?"horizontal":"vertical")}(),h=o(d,p,!1),u=o(p,d,!0),h.attackEnemy([0,1]),h.attackEnemy([5,5]),u.attackEnemy(),u.attackEnemy(),function(){let e=document.querySelector("body");!function(){let e=document.querySelector("body"),t=document.createElement("div");t.id="instructions",t.className="modal";let n=document.createElement("div");n.className="modal-content",n.innerHTML="Instructions";let o=document.createElement("span");o.className="close",o.id="close-instructions-button",o.innerHTML="&times;",n.appendChild(o),t.appendChild(n),e.appendChild(t)}(),function(){let e=document.querySelector("body"),t=document.createElement("div");t.id="gameOver",t.className="modal",t.style.display="none";let n=document.createElement("div");n.className="modal-content",n.innerHTML="Game Over";let o=document.createElement("span");o.className="close",o.id="close-game-button",o.innerHTML="&times;",n.appendChild(o),t.appendChild(n),e.appendChild(t)}();let t=document.createElement("header");t.innerHTML="Battleship",t.id="header";let n=document.createElement("h1");n.innerHTML="Place your Ships!",n.id="secondary";let o=document.createElement("button");o.innerHTML="Start Game",o.id="start-button";let c=document.createElement("div");c.id="main-body";let l=function(){let e=document.createElement("div");e.className="game-board",e.id="player-board";let t=a("player"),n=document.createElement("p");return n.innerHTML="Player board",n.className="board-name",e.appendChild(t),e.appendChild(n),e}(),d=function(){let e=document.createElement("div");e.className="game-board",e.id="computer-board";let t=a("computer"),n=document.createElement("p");return n.innerHTML="Computer board",n.className="board-name",e.appendChild(t),e.appendChild(n),e}();c.appendChild(l),c.appendChild(d);let p=document.createElement("button");p.innerHTML="Help",p.id="help-button",e.appendChild(t),e.appendChild(n),e.appendChild(o),e.appendChild(c),e.appendChild(p),i(),function(){let e=document.getElementById("start-button");e.addEventListener("click",(()=>{if("Start Game"==e.innerHTML)A=!0,console.log("Game started!!!!"),e.innerHTML="Reset Game";else if("Reset Game"==e.innerHTML){e.innerHTML="Start Game";let t=document.querySelector("body");for(;t.firstChild;)t.removeChild(t.firstChild);A=!1,f=!1,m="player",y(),document.getElementById("instructions").style.display="none"}})),document.getElementById("computer-board").addEventListener("click",(e=>{!B()&&E()&&e.target.classList.contains("unit")&&"player"==m&&function(e){let t=e.split("|");console.log("attack clicked!");let n=[parseInt(t[0]),parseInt(t[1])];var o,r,a;"computer"!=t[2]||(o=v().tries,r=n,a=JSON.stringify(r),o.some((function(e){return JSON.stringify(e)===a})))||(v().attackEnemy(n),i(),g())}(e.target.id)})),document.getElementById("player-board").addEventListener("click",(e=>{B()||E()||!e.target.classList.contains("ship")||function(e){let t=e.target.id.split("|");if("player"==t[2]){let n=[parseInt(t[0]),parseInt(t[1])];v().gameBoard.ships.forEach((e=>{e.selected=!1,e.posArray.forEach((t=>{JSON.stringify(n)==JSON.stringify(t)&&(r=e)}))})),r.selected=!0,console.log("selected"+r),e.stopPropagation()}}(e)})),window.addEventListener("click",(e=>{v().gameBoard.ships.forEach((e=>{e.selected=!1}))})),window.addEventListener("keydown",(function(e){if(!e.defaultPrevented){if(void 0!==r&&!E()){switch(e.key){case"ArrowDown":v().gameBoard.move(r,"down");break;case"ArrowUp":v().gameBoard.move(r,"up");break;case"ArrowLeft":v().gameBoard.move(r,"left");break;case"ArrowRight":v().gameBoard.move(r,"right");break;case" ":v().gameBoard.rotate(r);break;default:return}!function(){let e=document.querySelectorAll(".ship");Array.from(e).forEach((e=>{e.classList.remove("ship"),e.style.backgroundColor="blue"})),s(v().gameBoard.ships,"player"),s(b().gameBoard.ships,"computer")}()}e.preventDefault()}}),!0),function(){let e=document.getElementById("instructions"),t=document.getElementById("close-instructions-button");document.getElementById("help-button").onclick=function(){e.style.display="block"},t.onclick=function(){e.style.display="none"},window.onclick=function(t){t.target==e&&(e.style.display="none")}}()}()}()}async function g(){p.allSunk()||d.allSunk()?(m="computer",f=!0,console.log("Game Ended"),function(){let e=document.getElementById("gameOver"),t=document.getElementById("close-game-button");e.style.display="block",t.onclick=function(){e.style.display="none"},window.onclick=function(t){t.target==e&&(e.style.display="none")}}()):(m="computer",await(0,new Promise((e=>setTimeout(e,0)))),u.attackEnemy(),i(),m="player")}function v(){return h}function b(){return u}function E(){return A}function B(){return f}var C=n(379),k=n.n(C),I=n(795),M=n.n(I),w=n(569),x=n.n(w),S=n(565),L=n.n(S),N=n(216),P=n.n(N),T=n(589),O=n.n(T),H=n(426),z={};z.styleTagTransform=O(),z.setAttributes=L(),z.insert=x().bind(null,"head"),z.domAPI=M(),z.insertStyleElement=P(),k()(H.Z,z),H.Z&&H.Z.locals&&H.Z.locals,y()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,