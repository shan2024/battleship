(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,'\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: "Montserrat", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n    border-style: solid;\n    border-width: 1px;\n    padding:10px;\n    background-color: #fdffa9;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.selected {\n    opacity:.5;\n}\n\n.player.ship:hover {\n    opacity: .5;\n}\n\n.computer:hover {\n    opacity:.5;\n}\n\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    \n    border-color: black;\n}\n\n.computer {\n    background-color: #bce2f1 ;\n    border-color: #aaaaaa;\n}  \n\n.miss {\n    /* background-image: url(\'./images/splash.png\');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url(\'./images/flame.png\');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n.hit:hover {\n    opacity:1;\n}\n\n.miss:hover{\n    opacity:1;\n}\n\n.highlighted {\n    border-color: red;\n}\n\n\n\n\n\n\n/*Instruction Screen*/\n#instructions-title {\n    text-align: center;\n    font-size: 2vw;\n}\n.instructions-header {\n    font-size: 1vw;\n    font-family: "Raleway", sans-serif;\n\n}\n\n/* Game Over Screen*/\n#game-over-title{\n    text-align: center;\n    font-size: 4vw;\n}\n\n#game-over-description {\n    font-size: 2vw;\n    text-align: center;\n}\n\n/* .description {\n} */\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #f4f5f5;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 30vw;\n    height: 70vh;\n    border-radius: 10px;\n    overflow-y:auto;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: "Montserrat", sans-serif;\n    font-weight: 900;\n    font-size: 3vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}\n\n.board-name {\n    font-size: 4vh;\n}\n\n/*Indicator*/\n.indicator {\n    height:100px;\n    width:100px;\n    display: flex;\n    /* background-color: #bce2f1; */\n    flex-direction: column-reverse;\n    align-items: center;\n    justify-content: center;\n    border-style: solid;\n    border-radius: 1px;\n    border-width: 0px;\n\n    gap:5px;\n}\n\n.indicator-row {\n    display:flex;\n    gap:2px;\n}\n\n.indicator-unit {\n    height:10px;\n    width:10px;\n    background-color: #839b97;\n}\n\n#player-indicator {\n    margin-right: -9vw;\n}\n\n#computer-indicator {\n    margin-left: -9vw;\n}\n/* \n.divider {\n    border-left: 5px none black;\n    height: 45vh;\n} */\n.modal-content img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100%;\n    max-height: 100%;\n}\n\n\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: "Montserrat", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n    border-style: solid;\n    border-width: 1px;\n    padding:10px;\n    background-color: #fdffa9;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.selected {\n    opacity:.5;\n}\n\n.player.ship:hover {\n    opacity: .5;\n}\n\n.computer:hover {\n    opacity:.5;\n}\n\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    \n    border-color: black;\n}\n\n.computer {\n    background-color: #bce2f1 ;\n    border-color: #aaaaaa;\n}  \n\n.miss {\n    /* background-image: url(\'./images/splash.png\');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url(\'./images/flame.png\');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n.hit:hover {\n    opacity:1;\n}\n\n.miss:hover{\n    opacity:1;\n}\n\n.highlighted {\n    border-color: red;\n}\n\n\n\n\n\n\n/*Instruction Screen*/\n#instructions-title {\n    text-align: center;\n    font-size: 2vw;\n}\n.instructions-header {\n    font-size: 1vw;\n    font-family: "Raleway", sans-serif;\n\n}\n\n/* Game Over Screen*/\n#game-over-title{\n    text-align: center;\n    font-size: 4vw;\n}\n\n#game-over-description {\n    font-size: 2vw;\n    text-align: center;\n}\n\n/* .description {\n} */\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #f4f5f5;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 30vw;\n    height: 70vh;\n    border-radius: 10px;\n    overflow-y:auto;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: "Montserrat", sans-serif;\n    font-weight: 900;\n    font-size: 3vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}\n\n.board-name {\n    font-size: 4vh;\n}\n\n/*Indicator*/\n.indicator {\n    height:100px;\n    width:100px;\n    display: flex;\n    /* background-color: #bce2f1; */\n    flex-direction: column-reverse;\n    align-items: center;\n    justify-content: center;\n    border-style: solid;\n    border-radius: 1px;\n    border-width: 0px;\n\n    gap:5px;\n}\n\n.indicator-row {\n    display:flex;\n    gap:2px;\n}\n\n.indicator-unit {\n    height:10px;\n    width:10px;\n    background-color: #839b97;\n}\n\n#player-indicator {\n    margin-right: -9vw;\n}\n\n#computer-indicator {\n    margin-left: -9vw;\n}\n/* \n.divider {\n    border-left: 5px none black;\n    height: 45vh;\n} */\n.modal-content img {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100%;\n    max-height: 100%;\n}\n\n\n\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var p=t(A),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var u=r(h,o);o.byIndex=s,n.splice(s,0,{identifier:A,updater:u,references:1})}i.push(A)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var c=o(e,r),l=0;l<a.length;l++){var d=t(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},43:(e,n,t)=>{e.exports=t.p+"946cf2f3eeeb7da168db.png"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{function e(e,n,t){let o=[n];for(let r=1;r<e;r++)"horizontal"==t?o.push([n[0]+r,n[1]]):"vertical"==t&&o.push([n[0],n[1]+r]);return{selected:!1,startPos:n,posArray:o,hits:[],length:e,orientation:t,hit(e){return n=this.posArray,t=e,o=JSON.stringify(t),!!n.some((function(e){return JSON.stringify(e)===o}))&&(console.log("got hit"),this.hits.push(e),!0);var n,t,o},isSunk(){return this.hits.length==this.length},move(e){switch(e){case"right":this.startPos=[this.startPos[0]+1,this.startPos[1]],this.posArray=this.posArray.map((e=>[e[0]+1,e[1]]));break;case"left":this.startPos=[this.startPos[0]-1,this.startPos[1]],this.posArray=this.posArray.map((e=>[e[0]-1,e[1]]));break;case"down":this.startPos=[this.startPos[0],this.startPos[1]+1],this.posArray=this.posArray.map((e=>[e[0],e[1]+1]));break;case"up":this.startPos=[this.startPos[0],this.startPos[1]-1],this.posArray=this.posArray.map((e=>[e[0],e[1]-1]))}},rotate(){this.posArray.length=0,this.posArray=[this.startPos],"horizontal"==this.orientation?this.orientation="vertical":this.orientation="horizontal";for(let e=1;e<this.length;e++)"horizontal"==this.orientation?this.posArray.push([this.startPos[0]+e,this.startPos[1]]):"vertical"==this.orientation&&this.posArray.push([this.startPos[0],this.startPos[1]+e])}}}function n(){function n(e,n){var t=JSON.stringify(n);return e.some((function(e){return JSON.stringify(e)===t}))}return{ships:[],hits:[],misses:[],placeShip(t,o,r){let a=!1,i=e(t,o,r);this.ships.forEach((e=>{e.posArray.forEach((e=>{n(i.posArray,e)&&(a=!0)}))})),a||this.ships.push(i)},receiveAttack(e){let n=!1;this.ships.forEach((t=>{t.hit(e)&&(this.hits.push(e),n=!0)})),n||this.misses.push(e)},allSunk(){let e=!0;return this.ships.forEach((n=>{n.isSunk()||(e=!1)})),e},move(t,o){let r,a=!0;switch(o){case"right":r=e(t.length,[t.posArray[0][0]+1,t.posArray[0][1]],t.orientation);break;case"left":r=e(t.length,[t.posArray[0][0]-1,t.posArray[0][1]],t.orientation);break;case"down":r=e(t.length,[t.posArray[0][0],t.posArray[0][1]+1],t.orientation);break;case"up":r=e(t.length,[t.posArray[0][0],t.posArray[0][1]-1],t.orientation)}this.ships.forEach((e=>{e!=t&&e.posArray.forEach((e=>{n(r.posArray,e)&&(console.log("anothership in the way!!!"),a=!1)})),r.posArray.forEach((e=>{(e[0]>9||e[1]>9||e[0]<0||e[1]<0)&&(console.log("reached the border!!"),a=!1)}))})),console.log("can move:"+a+" in "+o),a?(t.move(o),console.log(this.ships)):M(t)},rotate(t){let o,r=!0;o="horizontal"==t.orientation?e(t.length,t.posArray[0],"vertical"):e(t.length,t.posArray[0],"horizontal"),this.ships.forEach((e=>{e!=t&&e.posArray.forEach((e=>{n(o.posArray,e)&&(console.log("anothership in the way!!!"),r=!1)})),o.posArray.forEach((e=>{(e[0]>9||e[1]>9||e[0]<0||e[1]<0)&&(console.log("reached the border!!"),r=!1)}))})),console.log("can rotate: "+r),r?(t.rotate(),console.log(this.ships)):M(t)}}}function o(e,n,t){function o(e,n){var t=JSON.stringify(n);return e.some((function(e){return JSON.stringify(e)===t}))}return t?{gameBoard:e,enemyGameboard:n,tries:[],attackEnemy(){let e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];for(;o(this.tries,e);)e=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];this.tries.push(e),n.receiveAttack(e)}}:{gameBoard:e,enemyGameboard:n,tries:[],attackEnemy(e){o(this.tries,e)||(n.receiveAttack(e),this.tries.push(e))}}}let r,a,i,s,c="player",l=!1,d=!1;async function A(){a.allSunk()||r.allSunk()?(S("Game Over"),c="computer",p()):(c="computer",v(),S("Opponent Turn"),await(1500,new Promise((e=>setTimeout(e,1500)))),s.attackEnemy(),a.allSunk()||r.allSunk()?(S("Game Over"),c="computer",I(),p()):(I(),c="player",S("Your Turn"),v()))}function p(){d=!0,console.log("Game Ended"),function(){let e=document.getElementById("gameOver"),n=document.getElementById("close-game-button"),t=document.getElementById("game-over-description"),o=document.getElementById("game-over-title");m().gameBoard.allSunk()?(o.innerHTML="You Won",t.innerHTML='You sunk all the opponent\'s ships!<br/><br/>Click "Reset" to play again.'):(o.innerHTML="You Lost",t.innerHTML='The opponent sunk all your ships!<br/><br/>Click "Reset" to play again.'),e.style.display="block",n.onclick=function(){e.style.display="none"},window.onclick=function(n){if(n.target==e){e.style.display="none";let n=document.getElementById("instructions");window.onclick=function(e){e.target==n&&(n.style.display="none")}}}}()}function h(){return c}function u(){return i}function m(){return s}function f(){return l}function g(){return d}var y=t(43);let C;function B(e){let n=document.createElement("div");return n.className="indicator",n.id=e+"-indicator",[1,2,3,4,5].forEach((t=>{let o=document.createElement("div");o.className="indicator-row";for(let n=0;n<t;n++){let n=document.createElement("div");n.className="indicator-unit",n.classList.add(t+"|"+e),o.appendChild(n)}n.appendChild(o)})),n}function b(e){let n=document.createElement("div");n.className="grid";for(let t=0;t<10;t++)for(let o=0;o<10;o++){let r=document.createElement("div");r.className="unit",r.classList.add(e),r.id=o+"|"+t+"|"+e,n.appendChild(r)}return n}function I(){w(u().gameBoard.ships,"player"),w(m().gameBoard.ships,"computer"),k(u().gameBoard.hits,"player"),x(u().gameBoard.misses,"player"),k(m().gameBoard.hits,"computer"),x(m().gameBoard.misses,"computer"),u().gameBoard.ships.forEach((e=>{if(e.isSunk()){let n=e.length+"|player";Array.from(document.getElementsByClassName(n)).forEach((e=>{e.style.opacity=".5"}))}})),m().gameBoard.ships.forEach((e=>{if(e.isSunk()){let n=e.length+"|computer";Array.from(document.getElementsByClassName(n)).forEach((e=>{e.style.opacity=".5"}))}}))}function v(){let e=document.getElementById("player-board"),n=document.getElementById("computer-board");"player"==h()?(n.style.opacity="1",e.style.opacity=".5"):(n.style.opacity=".5",e.style.opacity="1")}function E(){let e=document.querySelectorAll(".ship");Array.from(e).forEach((e=>{e.classList.remove("ship"),e.classList.remove("selected")})),w(u().gameBoard.ships,"player"),w(m().gameBoard.ships,"computer")}function w(e,n){e.forEach((e=>[e.posArray.forEach((t=>{let o=t[0]+"|"+t[1]+"|"+n,r=document.getElementById(o);r.classList.add("ship"),e.selected&&r.classList.add("selected")}))]))}function k(e,n){e.forEach((e=>{let t=e[0]+"|"+e[1]+"|"+n,o=document.getElementById(t);for(o.classList.add("hit");o.firstChild;)o.removeChild(o.firstChild);let r=document.createElement("p");r.innerHTML="&#10005;",o.appendChild(r)}))}function x(e,n){e.forEach((e=>{let t=e[0]+"|"+e[1]+"|"+n,o=document.getElementById(t);for(o.classList.add("miss");o.firstChild;)o.removeChild(o.firstChild);let r=document.createElement("p");o.appendChild(r)}))}function M(e){let n=[];e.posArray.forEach((e=>{let t=e[0]+"|"+e[1]+"|player",o=document.getElementById(t);n.push(o)})),n.forEach((e=>{e.classList.add("highlighted")})),n.forEach((e=>{setTimeout((()=>{e.classList.remove("highlighted")}),100)}))}function S(e){document.getElementById("secondary").innerHTML=e}var L=t(379),T=t.n(L),N=t(795),z=t.n(N),H=t(569),O=t.n(H),Y=t(565),P=t.n(Y),j=t(216),q=t.n(j),W=t(589),G=t.n(W),U=t(426),Z={};Z.styleTagTransform=G(),Z.setAttributes=P(),Z.insert=O().bind(null,"head"),Z.domAPI=z(),Z.insertStyleElement=q(),T()(U.Z,Z),U.Z&&U.Z.locals&&U.Z.locals,function e(){r=n(),a=n(),r.placeShip(5,[0,0],"vertical"),r.placeShip(4,[1,0],"vertical"),r.placeShip(3,[2,0],"vertical"),r.placeShip(2,[3,0],"vertical"),r.placeShip(1,[4,0],"vertical"),function(){for(;1!=a.ships.length;)a.placeShip(5,[Math.floor(6*Math.random()),Math.floor(6*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;2!=a.ships.length;)a.placeShip(4,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;3!=a.ships.length;)a.placeShip(3,[Math.floor(8*Math.random()),Math.floor(8*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;4!=a.ships.length;)a.placeShip(2,[Math.floor(9*Math.random()),Math.floor(9*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;5!=a.ships.length;)a.placeShip(1,[Math.floor(10*Math.random()),Math.floor(10*Math.random())],Math.random()>.5?"horizontal":"vertical")}(),i=o(r,a,!1),s=o(a,r,!0),function(){let n=document.querySelector("body");(function(){let e=document.querySelector("body"),n=document.createElement("div");n.id="instructions",n.className="modal";let t=document.createElement("div");t.className="modal-content";let o=document.createElement("span");o.className="close",o.id="close-instructions-button",o.innerHTML="&times;";let r=document.createElement("h3");r.innerHTML="Welcome to Battleship",r.id="instructions-title";let a=document.createElement("h4");a.innerHTML="Game Objective",a.className="instructions-header";let i=document.createElement("p");i.className="description",i.innerHTML="The objective of Battleship is to try and sink all of the opponent's    ships before they sink all of your ships. All of the opponent's ships are hidden somewhere    on their board. <br/><br/>Each round, you try and hit the opponent's ships by selecting a coordinate of one of the squares    on the board. The opponent also tries to hit your ships by selecting coordinates. Neither you nor    the opponent can see the other's board so you must guess where they are. Each board has two grids:    the left section for the player's ships and the right section for the opponent's ships.";let s=document.createElement("h4");s.innerHTML="Starting a New Game",s.className="instructions-header";let c=document.createElement("p");c.className="description",c.innerHTML="Each player places the 5 ships somwhere on their board. A ship may be selected    by clicking on the ship.";let l=document.createElement("p");l.className="description",l.innerHTML='Then, use the arrow keys to move it up, down, right, or left, and use the space bar to     rotate the ship.<br/><br/> The ships can    only be placed vertically or horizontally. Diagonal placement is not allowed. No part of a ship may hang    off the edge of the board. Ships may not overlap each other. No ships may be placed on another ship.     Once the guessing begins, players may not move the ships. The 5 ships are:  Carrier (occupies 5 spaces),    Battleship (4), Cruiser (3), Destroyer (2), and Submarine (1). <br/><br/> When you are ready, click "start" to begin    the game.';let d=new Image;d.src=y;let A=document.createElement("h4");A.innerHTML="Playing the Game",A.className="instructions-header";let p=document.createElement("p");p.className="description",p.innerHTML="Each round, a player makes a guess by selecting coordinates on the opponent's grid.    If the guessed coordinate hits an enemy ship, the grid will be marked with a red X. If the guess misses, the grid will be    marked with a white dot. For example, if you guess (1,6) and the opponent does not have any ship located at (1,6), the     opponent's grid would be marked with a white dot at (1,6).<br/><br/> When all of the squares that one of your ships occupies are hit    the ship will be sunk, and this will be indicated to both players. As soon as all of one player's ships have been sunk, the     game ends. <br/><br/>To start a new game, or to reset at any point within a game, click \"reset\".",t.appendChild(o),t.appendChild(r),t.appendChild(a),t.appendChild(i),t.appendChild(s),t.appendChild(c),t.appendChild(d),t.appendChild(l),t.appendChild(A),t.appendChild(p),n.appendChild(t),e.appendChild(n)})(),function(){let e=document.querySelector("body"),n=document.createElement("div");n.id="gameOver",n.className="modal",n.style.display="none";let t=document.createElement("div");t.className="modal-content";let o=document.createElement("h1");o.id="game-over-title",o.innerHTML="Game Over";let r=document.createElement("p");r.id="game-over-description";let a=document.createElement("span");a.className="close",a.id="close-game-button",a.innerHTML="&times;",t.appendChild(a),t.appendChild(o),t.appendChild(r),n.appendChild(t),e.appendChild(n)}();let t=document.createElement("header");t.innerHTML="Battleship",t.id="header";let o=document.createElement("h1");o.innerHTML="Place Your Ships",o.id="secondary";let r=document.createElement("button");r.innerHTML="Start",r.id="start-button";let a=document.createElement("div");a.id="main-body";let i=B("player"),s=B("computer"),p=function(){let e=document.createElement("div");e.className="game-board",e.id="player-board";let n=b("player"),t=document.createElement("p");return t.innerHTML="Player",t.className="board-name",e.appendChild(n),e.appendChild(t),e}(),m=function(){let e=document.createElement("div");e.className="game-board",e.id="computer-board";let n=b("computer"),t=document.createElement("p");return t.innerHTML="Computer",t.className="board-name",e.appendChild(n),e.appendChild(t),e}();a.appendChild(i),a.appendChild(p),a.appendChild(m),a.appendChild(s);let v=document.createElement("button");v.innerHTML="Help",v.id="help-button",n.appendChild(t),n.appendChild(o),n.appendChild(r),n.appendChild(a),n.appendChild(v),I(),function(){let n=document.getElementById("start-button");n.addEventListener("click",(()=>{if("Start"==n.innerHTML)l=!0,S("Your Turn"),console.log("Game started!!!!"),n.innerHTML="Reset";else if("Reset"==n.innerHTML){n.innerHTML="Start";let t=document.querySelector("body");for(;t.firstChild;)t.removeChild(t.firstChild);l=!1,d=!1,c="player",e(),document.getElementById("instructions").style.display="none"}})),document.getElementById("computer-board").addEventListener("click",(e=>{!g()&&f()&&e.target.classList.contains("unit")&&"player"==h()&&function(e){let n=e.split("|");console.log("attack clicked!");let t=[parseInt(n[0]),parseInt(n[1])];var o,r,a;"computer"!=n[2]||(o=u().tries,r=t,a=JSON.stringify(r),o.some((function(e){return JSON.stringify(e)===a})))||(u().attackEnemy(t),I(),A())}(e.target.id)})),document.getElementById("player-board").addEventListener("click",(e=>{g()||f()||!e.target.classList.contains("ship")||function(e){let n=e.target.id.split("|");if("player"==n[2]){let t=[parseInt(n[0]),parseInt(n[1])];u().gameBoard.ships.forEach((e=>{e.selected=!1,e.posArray.forEach((n=>{JSON.stringify(t)==JSON.stringify(n)&&(C=e)}))})),C.selected=!0,E(),e.stopPropagation()}}(e)})),window.addEventListener("click",(e=>{u().gameBoard.ships.forEach((e=>{e.selected=!1,E()}))})),window.addEventListener("keydown",(function(e){if(!e.defaultPrevented){if(void 0!==C&&!f()){switch(e.key){case"ArrowDown":u().gameBoard.move(C,"down");break;case"ArrowUp":u().gameBoard.move(C,"up");break;case"ArrowLeft":u().gameBoard.move(C,"left");break;case"ArrowRight":u().gameBoard.move(C,"right");break;case" ":u().gameBoard.rotate(C);break;default:return}E()}e.preventDefault()}}),!0),function(){let e=document.getElementById("instructions"),n=document.getElementById("close-instructions-button");document.getElementById("help-button").onclick=function(){e.style.display="block"},n.onclick=function(){e.style.display="none"},window.onclick=function(n){n.target==e&&(e.style.display="none")}}()}()}()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,