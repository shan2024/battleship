(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,"\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: \"Montserrat\", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    \n    border-color: black;\n}\n\n.miss {\n    /* background-image: url('./images/splash.png');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url('./images/flame.png');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n\n\n\n/*Instruction Screen*/\n\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #92e2ec;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 200px;\n    border-radius: 10px;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: \"Montserrat\", sans-serif;\n    font-weight: 900;\n    font-size: 4vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";AACA;IACI,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,qCAAqC;IACrC,oCAAoC;IACpC,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,cAAc;AAClB;AACA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,YAAY;IACZ,aAAa;IACb,OAAO;IACP,mBAAmB;IACnB,iBAAiB;IACjB,YAAY;AAChB;;AAEA,iBAAiB;AACjB;;IAEI,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,iBAAiB;IACjB,0BAA0B;IAC1B,kBAAkB;IAClB,qBAAqB;IACrB,wBAAwB;AAC5B;;AAEA;IACI,4CAA4C;;IAE5C,mBAAmB;AACvB;;AAEA;IACI;+BAC2B;IAC3B,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;;AAEvB;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,SAAS;AACb;;AAEA;IACI;+BAC2B;IAC3B,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;AACvB;;;;;AAKA,qBAAqB;;AAErB;IACI,cAAc,EAAE,sBAAsB;IACtC,eAAe,EAAE,kBAAkB;IACnC,UAAU,EAAE,eAAe;IAC3B,kBAAkB,EAAE,wBAAwB;IAC5C,OAAO;IACP,MAAM;IACN,WAAW,EAAE,eAAe;IAC5B,YAAY,EAAE,gBAAgB;IAC9B,cAAc,EAAE,4BAA4B;IAC5C,4BAA4B,EAAE,mBAAmB;IACjD,iCAAiC,EAAE,qBAAqB;EAC1D;;EAEA,kBAAkB;EAClB;IACE,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,mBAAmB;;EAErB;;GAEC,qBAAqB;GACrB;IACC,cAAc;IACd,YAAY;IACZ,eAAe;IACf,iBAAiB;EACnB;;EAEA;;IAEE,WAAW;IACX,qBAAqB;IACrB,eAAe;EACjB;;AAEF,WAAW;AACX;IACI,qCAAqC;IACrC,gBAAgB;IAChB,cAAc;IACd,UAAU;AACd;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB",sourcesContent:["\nbody {\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    font-family: \"Montserrat\", sans-serif;\n    background-color: rgb(235, 235, 229);\n    font-weight:100;\n}\n\nheader {\n    font-size: 12vh;\n}\n\n#secondary {\n    font-size: 4vh;\n}\n#main-body {\n    width: 100vw;\n    display: flex;\n    justify-content:center;\n    gap:10vw;\n    flex-wrap: wrap;\n}\n\n.game-board {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    width: 398px;\n    height: 398px;\n    gap:2px;\n    border-style: solid;\n    border-width: 2px;\n    padding: 1px;\n}\n\n/* Color coding */\n.unit {\n\n    width: 36px;\n    height: 36px;\n    border-style: solid;\n    border-width: 1px;\n    background-color: #bce2f1 ;\n    border-radius: 3px;\n    border-color: #aaaaaa;\n    /* 20 lines, and 9 gaps*/\n}\n\n.ship {\n    background-color: rgba(153, 151, 147, 0.795);\n    \n    border-color: black;\n}\n\n.miss {\n    /* background-image: url('./images/splash.png');\n    background-size: contain; */\n    background-color: rgb(255, 255, 255);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n\n}\n\n.miss p {\n    border-radius: 100%;\n    background-color: black;\n    height: 5px;\n    width:5px;\n}\n\n.hit {\n    /* background-image: url('./images/flame.png');\n    background-size: contain; */\n    background-color: rgb(240, 124, 124);\n    display: flex; \n    justify-content: center;\n    text-align: center;\n    align-items: center;\n}\n\n\n\n\n/*Instruction Screen*/\n\n.modal {\n    display: block; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n  }\n\n  /* Modal Content */\n  .modal-content {\n    background-color: #92e2ec;\n    margin: auto;\n    padding: 20px;\n    border: 1px solid #888;\n    width: 200px;\n    border-radius: 10px;\n   \n  }\n\n   /* The Close Button */\n   .close {\n    color: #aaaaaa;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  \n  .close:hover,\n  .close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n  }\n\n/* General*/ \nbutton {\n    font-family: \"Montserrat\", sans-serif;\n    font-weight: 900;\n    font-size: 4vh;\n    width: 5em;\n}\n\n#start-button {\n    margin-bottom: 20px;\n}\n\n#help-button {\n    font-size: 2vh;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var p=t(A),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var u=r(h,o);o.byIndex=s,e.splice(s,0,{identifier:A,updater:u,references:1})}i.push(A)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{function n(n,e,t){let o=[e];for(let r=1;r<n;r++)"horizontal"==t?o.push([e[0]+r,e[1]]):"vertical"==t&&o.push([e[0],e[1]+r]);return{selected:!1,startPos:e,posArray:o,hits:[],length:n,orientation:t,hit(n){return e=this.posArray,t=n,o=JSON.stringify(t),!!e.some((function(n){return JSON.stringify(n)===o}))&&(console.log("got hit"),this.hits.push(n),!0);var e,t,o},isSunk(){return this.hits.length==this.length},move(n){switch(n){case"right":this.startPos=[this.startPos[0]+1,this.startPos[1]],this.posArray=this.posArray.map((n=>[n[0]+1,n[1]]));break;case"left":this.startPos=[this.startPos[0]-1,this.startPos[1]],this.posArray=this.posArray.map((n=>[n[0]-1,n[1]]));break;case"down":this.startPos=[this.startPos[0],this.startPos[1]+1],this.posArray=this.posArray.map((n=>[n[0],n[1]+1]));break;case"up":this.startPos=[this.startPos[0],this.startPos[1]-1],this.posArray=this.posArray.map((n=>[n[0],n[1]-1]))}},rotate(){this.posArray.length=0,this.posArray=[this.startPos],"horizontal"==this.orientation?this.orientation="vertical":this.orientation="horizontal";for(let n=1;n<this.length;n++)"horizontal"==this.orientation?this.posArray.push([this.startPos[0]+n,this.startPos[1]]):"vertical"==this.orientation&&this.posArray.push([this.startPos[0],this.startPos[1]+n])}}}function e(){function e(n,e){var t=JSON.stringify(e);return n.some((function(n){return JSON.stringify(n)===t}))}return{ships:[],hits:[],misses:[],placeShip(t,o,r){let a=!1,i=n(t,o,r);this.ships.forEach((n=>{n.posArray.forEach((n=>{e(i.posArray,n)&&(a=!0)}))})),a||this.ships.push(i)},receiveAttack(n){let e=!1;this.ships.forEach((t=>{t.hit(n)&&(this.hits.push(n),e=!0)})),e||this.misses.push(n)},allSunk(){let n=!0;return this.ships.forEach((e=>{e.isSunk()||(n=!1)})),n},move(t,o){let r,a=!0;switch(o){case"right":r=n(t.length,[t.posArray[0][0]+1,t.posArray[0][1]],t.orientation);break;case"left":r=n(t.length,[t.posArray[0][0]-1,t.posArray[0][1]],t.orientation);break;case"down":r=n(t.length,[t.posArray[0][0],t.posArray[0][1]+1],t.orientation);break;case"up":r=n(t.length,[t.posArray[0][0],t.posArray[0][1]-1],t.orientation)}this.ships.forEach((n=>{n!=t&&n.posArray.forEach((n=>{e(r.posArray,n)&&(console.log("anothership in the way!!!"),a=!1)})),r.posArray.forEach((n=>{(n[0]>9||n[1]>9||n[0]<0||n[1]<0)&&(console.log("reached the border!!"),a=!1)}))})),console.log("can move:"+a+" in "+o),a&&(t.move(o),console.log(this.ships))},rotate(t){let o,r=!0;o="horizontal"==t.orientation?n(t.length,t.posArray[0],"vertical"):n(t.length,t.posArray[0],"horizontal"),this.ships.forEach((n=>{n!=t&&n.posArray.forEach((n=>{e(o.posArray,n)&&(console.log("anothership in the way!!!"),r=!1)})),o.posArray.forEach((n=>{(n[0]>9||n[1]>9||n[0]<0||n[1]<0)&&(console.log("reached the border!!"),r=!1)}))})),console.log("can rotate: "+r),r&&(t.rotate(),console.log(this.ships))}}}function o(n,e,t){function o(n,e){var t=JSON.stringify(e);return n.some((function(n){return JSON.stringify(n)===t}))}return t?{gameBoard:n,enemyGameboard:e,tries:[],attackEnemy(){let n=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];for(;o(this.tries,n);)n=[Math.floor(10*Math.random()),Math.floor(10*Math.random())];this.tries.push(n),e.receiveAttack(n)}}:{gameBoard:n,enemyGameboard:e,tries:[],attackEnemy(n){o(this.tries,n)||(e.receiveAttack(n),this.tries.push(n))}}}let r;function a(n){let e=document.createElement("div");e.className="grid";for(let t=0;t<10;t++)for(let o=0;o<10;o++){let r=document.createElement("div");r.className="unit",r.id=o+"|"+t+"|"+n,e.appendChild(r)}return e}function i(){s(C().gameBoard.ships,"player"),s(B().gameBoard.ships,"computer"),c(C().gameBoard.hits,"player"),l(C().gameBoard.misses,"player"),c(B().gameBoard.hits,"computer"),l(B().gameBoard.misses,"computer")}function s(n,e){n.forEach((n=>[n.posArray.forEach((n=>{let t=n[0]+"|"+n[1]+"|"+e;document.getElementById(t).classList.add("ship")}))]))}function c(n,e){n.forEach((n=>{let t=n[0]+"|"+n[1]+"|"+e,o=document.getElementById(t);for(o.classList.add("hit");o.firstChild;)o.removeChild(o.firstChild);let r=document.createElement("p");r.innerHTML="&#10005;",o.appendChild(r)}))}function l(n,e){n.forEach((n=>{let t=n[0]+"|"+n[1]+"|"+e,o=document.getElementById(t);for(o.classList.add("miss");o.firstChild;)o.removeChild(o.firstChild);let r=document.createElement("p");o.appendChild(r)}))}let d,A,p,h,u="player",m=!1,f=!1;function g(){d=e(),A=e(),d.placeShip(5,[0,0],"vertical"),d.placeShip(4,[1,0],"vertical"),d.placeShip(3,[2,0],"vertical"),d.placeShip(3,[3,0],"vertical"),d.placeShip(2,[4,0],"vertical"),function(){for(A.placeShip(5,[Math.floor(5*Math.random()),Math.floor(5*Math.random())],Math.random()>.5?"horizontal":"vertical");2!=A.ships.length;)A.placeShip(4,[Math.floor(6*Math.random()),Math.floor(6*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;3!=A.ships.length;)A.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;4!=A.ships.length;)A.placeShip(3,[Math.floor(7*Math.random()),Math.floor(7*Math.random())],Math.random()>.5?"horizontal":"vertical");for(;5!=A.ships.length;)A.placeShip(2,[Math.floor(8*Math.random()),Math.floor(8*Math.random())],Math.random()>.5?"horizontal":"vertical")}(),p=o(d,A,!1),h=o(A,d,!0),p.attackEnemy([0,1]),p.attackEnemy([5,5]),h.attackEnemy(),h.attackEnemy(),function(){let n=document.querySelector("body");!function(){let n=document.querySelector("body"),e=document.createElement("div");e.id="instructions",e.className="modal";let t=document.createElement("div");t.className="modal-content",t.innerHTML="Instructions";let o=document.createElement("span");o.className="close",o.id="close-instructions-button",o.innerHTML="&times;",t.appendChild(o),e.appendChild(t),n.appendChild(e)}(),function(){let n=document.querySelector("body"),e=document.createElement("div");e.id="gameOver",e.className="modal",e.style.display="none";let t=document.createElement("div");t.className="modal-content",t.innerHTML="Game Over";let o=document.createElement("span");o.className="close",o.id="close-game-button",o.innerHTML="&times;",t.appendChild(o),e.appendChild(t),n.appendChild(e)}();let e=document.createElement("header");e.innerHTML="Battleship",e.id="header";let t=document.createElement("h1");t.innerHTML="Place your Ships!",t.id="secondary";let o=document.createElement("button");o.innerHTML="Start",o.id="start-button";let c=document.createElement("div");c.id="main-body";let l=function(){let n=document.createElement("div");n.className="game-board",n.id="player-board";let e=a("player"),t=document.createElement("p");return t.innerHTML="Player board",t.className="board-name",n.appendChild(e),n.appendChild(t),n}(),d=function(){let n=document.createElement("div");n.className="game-board",n.id="computer-board";let e=a("computer"),t=document.createElement("p");return t.innerHTML="Computer board",t.className="board-name",n.appendChild(e),n.appendChild(t),n}();c.appendChild(l),c.appendChild(d);let A=document.createElement("button");A.innerHTML="Help",A.id="help-button",n.appendChild(e),n.appendChild(t),n.appendChild(o),n.appendChild(c),n.appendChild(A),i(),function(){let n=document.getElementById("start-button");n.addEventListener("click",(()=>{if("Start"==n.innerHTML)m=!0,console.log("Game started!!!!"),n.innerHTML="Reset";else if("Reset"==n.innerHTML){n.innerHTML="Start";let e=document.querySelector("body");for(;e.firstChild;)e.removeChild(e.firstChild);m=!1,f=!1,u="player",g(),document.getElementById("instructions").style.display="none"}})),document.getElementById("computer-board").addEventListener("click",(n=>{!v()&&b()&&n.target.classList.contains("unit")&&"player"==u&&function(n){let e=n.split("|");console.log("attack clicked!");let t=[parseInt(e[0]),parseInt(e[1])];var o,r,a;"computer"!=e[2]||(o=C().tries,r=t,a=JSON.stringify(r),o.some((function(n){return JSON.stringify(n)===a})))||(C().attackEnemy(t),i(),y())}(n.target.id)})),document.getElementById("player-board").addEventListener("click",(n=>{v()||b()||!n.target.classList.contains("ship")||function(n){let e=n.target.id.split("|");if("player"==e[2]){let t=[parseInt(e[0]),parseInt(e[1])];C().gameBoard.ships.forEach((n=>{n.selected=!1,n.posArray.forEach((e=>{JSON.stringify(t)==JSON.stringify(e)&&(r=n)}))})),r.selected=!0,console.log("selected"+r),n.stopPropagation()}}(n)})),window.addEventListener("click",(n=>{C().gameBoard.ships.forEach((n=>{n.selected=!1}))})),window.addEventListener("keydown",(function(n){if(!n.defaultPrevented){if(void 0!==r&&!b()){switch(n.key){case"ArrowDown":C().gameBoard.move(r,"down");break;case"ArrowUp":C().gameBoard.move(r,"up");break;case"ArrowLeft":C().gameBoard.move(r,"left");break;case"ArrowRight":C().gameBoard.move(r,"right");break;case" ":C().gameBoard.rotate(r);break;default:return}!function(){let n=document.querySelectorAll(".ship");Array.from(n).forEach((n=>{n.classList.remove("ship")})),s(C().gameBoard.ships,"player"),s(B().gameBoard.ships,"computer")}()}n.preventDefault()}}),!0),function(){let n=document.getElementById("instructions"),e=document.getElementById("close-instructions-button");document.getElementById("help-button").onclick=function(){n.style.display="block"},e.onclick=function(){n.style.display="none"},window.onclick=function(e){e.target==n&&(n.style.display="none")}}()}()}()}async function y(){A.allSunk()||d.allSunk()?(u="computer",f=!0,console.log("Game Ended"),function(){let n=document.getElementById("gameOver"),e=document.getElementById("close-game-button");n.style.display="block",e.onclick=function(){n.style.display="none"},window.onclick=function(e){e.target==n&&(n.style.display="none")}}()):(u="computer",await(0,new Promise((n=>setTimeout(n,0)))),h.attackEnemy(),i(),u="player")}function C(){return p}function B(){return h}function b(){return m}function v(){return f}var I=t(379),E=t.n(I),k=t(795),x=t.n(k),w=t(569),M=t.n(w),S=t(565),L=t.n(S),P=t(216),z=t.n(P),N=t(589),T=t.n(N),O=t(426),j={};j.styleTagTransform=T(),j.setAttributes=L(),j.insert=M().bind(null,"head"),j.domAPI=x(),j.insertStyleElement=z(),E()(O.Z,j),O.Z&&O.Z.locals&&O.Z.locals,g()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,